var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AboutController.html",[0,1.004,1,2.651]],["body/controllers/AboutController.html",[0,1.231,1,4.14,2,1.288,3,0.241,4,0.216,5,0.216,6,3.989,7,2.313,8,4.63,9,0.404,10,1.717,11,1.977,12,5.896,13,4.63,14,2.999,15,0.979,16,0.018,17,0.557,18,4.63,19,1.348,20,1.124,21,1.231,22,4.203,23,1.348,24,0.338,25,0.732,26,3.251,27,4.63,28,3.909,29,3.989,30,4.63,31,0.241,32,0.161,33,1.477,34,1.547,35,1.348,36,4.63,37,4.63,38,4.63,39,0.013,40,0.013]],["title/modules/AboutModule.html",[41,1.099,42,2.446]],["body/modules/AboutModule.html",[1,4.691,2,1.708,3,0.257,4,0.231,5,0.231,16,0.017,24,0.348,25,0.78,28,4.416,29,4.253,31,0.257,32,0.171,39,0.014,40,0.014,41,1.787,42,4.747,43,1.996,44,2.482,45,4.253,46,4.253,47,2.749,48,2.211,49,2.211,50,4.936,51,2.9,52,4.936]],["title/injectables/AboutService.html",[28,2.275,53,0.959]],["body/injectables/AboutService.html",[3,0.182,4,0.163,5,0.163,9,0.304,10,1.421,11,1.715,14,2.075,16,0.018,17,0.587,19,1.421,20,1.557,21,1.297,23,1.016,24,0.293,25,0.551,28,2.94,31,0.182,32,0.121,33,1.556,34,1.165,35,1.016,39,0.011,40,0.011,53,1.24,54,1.484,55,3.006,56,4.88,57,1.967,58,3.229,59,3.489,60,0.658,61,2.751,62,4.88,63,3.489,64,4.88,65,1.848,66,2.585,67,1.648,68,2.075,69,1.848,70,2.326,71,3.759,72,2.393,73,3.391,74,2.306,75,3.006,76,3.489,77,3.006,78,3.489,79,3.489,80,3.006,81,3.489,82,2.45,83,2.751,84,4.204,85,3.489,86,2.45,87,4.88,88,4.88,89,2.26,90,3.489,91,4.88,92,3.489,93,2.751,94,3.489,95,3.489,96,2.26,97,3.489,98,3.489,99,3.489,100,3.489,101,3.489,102,3.006,103,2.687,104,2.45,105,1.221]],["title/controllers/ActionsController.html",[0,1.004,106,2.651]],["body/controllers/ActionsController.html",[0,1.332,2,1.394,3,0.261,4,0.234,5,0.234,7,2.503,9,0.437,10,1.804,11,2.049,15,1.06,16,0.017,17,0.603,19,1.458,20,1.216,21,1.332,23,1.458,24,0.261,25,0.791,31,0.261,32,0.174,39,0.014,40,0.014,103,3.859,106,4.35,107,4.316,108,6.195,109,5.01,110,6.195,111,5.01,112,2.589,113,2.503,114,5.01,115,5.01]],["title/modules/ActionsModule.html",[41,1.099,116,2.275]],["body/modules/ActionsModule.html",[2,1.626,3,0.238,4,0.213,5,0.213,16,0.018,24,0.366,25,0.722,31,0.238,32,0.159,39,0.013,40,0.013,41,1.702,43,1.847,44,2.364,47,2.618,48,2.045,49,2.045,51,2.762,106,4.526,116,4.457,117,3.935,118,3.935,119,3.395,120,3.218,121,4.567,122,3.097,123,2.282,124,1.942,125,2.959,126,4.567,127,4.567,128,2.42]],["title/injectables/ActionsService.html",[53,0.959,119,1.784]],["body/injectables/ActionsService.html",[3,0.094,4,0.084,5,0.084,9,0.157,10,0.86,11,2.006,14,1.256,16,0.018,17,0.617,19,1.391,20,1.16,21,1.27,23,1.391,24,0.305,25,0.285,31,0.094,32,0.063,33,0.942,34,1.252,35,1.092,39,0.007,40,0.007,53,0.751,54,0.768,57,1.018,58,2.295,60,0.761,61,1.666,66,1.565,67,0.853,68,1.256,69,0.957,70,2.239,72,2.558,73,1.78,74,2.047,89,3.659,96,2.429,104,1.268,113,0.902,119,1.396,120,2.425,123,2.705,124,0.768,125,1.17,129,1.556,130,2.955,131,2.276,132,2.955,133,2.955,134,4.332,135,1.806,136,2.955,137,1.394,138,2.993,139,6.583,140,1.914,141,1.806,142,3.487,143,2.955,144,1.932,145,3.097,146,3.75,147,1.806,148,2.239,149,2.955,150,3.042,151,1.806,152,2.955,153,1.806,154,1.806,155,0.809,156,1.018,157,1.806,158,2.955,159,1.806,160,1.556,161,1.268,162,1.806,163,6.16,164,2.955,165,1.806,166,5.649,167,1.806,168,1.806,169,1.806,170,1.391,171,1.806,172,2.955,173,1.806,174,1.806,175,1.806,176,1.806,177,1.806,178,2.546,179,4.332,180,0.809,181,1.806,182,1.806,183,2.075,184,1.806,185,2.259,186,2.61,187,1.806,188,1.806,189,1.78,190,1.806,191,1.806,192,1.806,193,1.806,194,1.806,195,1.806,196,1.806,197,1.806,198,1.556,199,1.806,200,1.806,201,1.556,202,1.391,203,1.806,204,1.806,205,1.914,206,1.806,207,2.955,208,1.17,209,1.391,210,1.556,211,1.806,212,2.955,213,1.806,214,3.75,215,1.088,216,1.806,217,2.888,218,2.633,219,1.806,220,2.955,221,1.806,222,1.556,223,2.114,224,1.806,225,1.806,226,1.806,227,1.556,228,1.806,229,1.806,230,1.806,231,1.556,232,1.556,233,1.806,234,2.955,235,1.556,236,3.23,237,1.268,238,1.806,239,1.556,240,1.556,241,1.806,242,1.806,243,1.556,244,1.806,245,2.955,246,1.806,247,1.806,248,1.268,249,1.806,250,1.806,251,1.806,252,1.806,253,1.806,254,1.556]],["title/controllers/AppController.html",[0,1.004,255,2.651]],["body/controllers/AppController.html",[0,1.651,2,1.399,3,0.262,4,0.235,5,0.235,9,0.438,10,1.808,15,1.063,16,0.018,17,0.605,23,1.464,24,0.324,25,0.794,31,0.262,32,0.175,35,1.464,39,0.014,40,0.014,105,1.76,137,1.253,255,4.36,256,4.332,257,6.061,258,5.029,259,4.059,260,4.332,261,5.029,262,5.029]],["title/modules/AppModule.html",[41,1.099,263,2.651]],["body/modules/AppModule.html",[2,1.199,3,0.153,4,0.137,5,0.137,16,0.018,24,0.389,25,0.463,31,0.153,32,0.102,39,0.01,40,0.01,41,1.254,42,4.061,43,1.186,44,1.742,47,1.93,48,1.314,49,1.314,51,2.036,67,1.386,68,1.247,116,3.777,128,2.283,161,2.06,189,1.767,255,3.586,259,3.777,260,2.527,263,5.336,264,2.527,265,2.527,266,2.527,267,3.777,268,4.061,269,4.061,270,4.061,271,4.061,272,3.777,273,4.061,274,3.534,275,2.933,276,3.309,277,2.933,278,2.933,279,2.933,280,1.9,281,3.319,282,2.933,283,2.527,284,2.933,285,2.933,286,1.314,287,2.933,288,1.9,289,2.933,290,2.933,291,2.933,292,2.933,293,2.933,294,2.933,295,2.933,296,2.933,297,2.933,298,2.933,299,2.933,300,2.933,301,2.933,302,2.933,303,2.933,304,1.767,305,2.527,306,2.933,307,2.933]],["title/injectables/AppService.html",[53,0.959,259,2.275]],["body/injectables/AppService.html",[3,0.273,4,0.245,5,0.245,9,0.457,10,1.855,16,0.017,17,0.631,23,1.527,24,0.273,25,0.829,31,0.273,32,0.182,39,0.014,40,0.014,53,1.619,54,2.23,105,1.835,137,1.286,257,6.15,259,3.839,308,4.518,309,5.244,310,5.244,311,5.244]],["title/classes/AreaCreationDto.html",[32,0.131,312,2.128]],["body/classes/AreaCreationDto.html",[3,0.207,4,0.185,5,0.185,9,0.345,15,1.419,16,0.017,17,0.807,20,0.962,24,0.207,31,0.314,32,0.223,39,0.012,40,0.012,60,0.904,83,2.233,93,2.233,137,1.537,142,2.099,144,1.602,145,3.186,148,1.863,312,3.001,313,1.207,314,2.782,315,1.55,316,4.632,317,4.632,318,4.632,319,4.223,320,2.783,321,3.962,322,3.962,323,3.962,324,3.962,325,3.962,326,2.782,327,4.165,328,1.386,329,2.387,330,3.052,331,2.387]],["title/classes/AreaId.html",[32,0.131,331,2.275]],["body/classes/AreaId.html",[3,0.234,4,0.21,5,0.21,9,0.392,15,0.95,16,0.017,17,0.54,20,1.09,24,0.234,31,0.334,32,0.235,39,0.013,40,0.013,60,0.605,83,2.532,93,2.532,137,1.526,142,2.379,144,2.338,145,2.379,148,2.363,312,2.532,313,1.368,314,3.154,315,1.683,316,3.46,317,3.46,318,3.46,319,3.154,320,2.755,326,3.154,327,4.527,328,1.572,329,2.706,330,3.46,331,3.484,332,4.491]],["title/controllers/AreasController.html",[0,1.004,288,2.446]],["body/controllers/AreasController.html",[0,0.763,2,0.799,3,0.15,4,0.134,5,0.134,7,1.434,9,0.25,10,1.235,11,2.055,14,3.026,15,1.067,16,0.018,17,0.607,19,1.468,20,1.225,21,1.341,23,1.468,24,0.352,25,0.454,31,0.15,32,0.1,33,0.916,34,1.685,35,1.468,39,0.01,40,0.01,60,0.571,70,1.005,72,2.527,112,2.764,113,1.434,123,2.52,124,1.221,131,3.267,138,2.951,148,1.005,155,2.495,156,1.618,185,1.73,205,1.86,223,1.618,237,2.978,286,1.899,288,2.747,312,3.14,331,3.356,333,2.473,334,3.654,335,4.241,336,2.871,337,2.871,338,2.871,339,3.122,340,2.871,341,2.871,342,2.871,343,2.871,344,2.871,345,2.871,346,1.73,347,1.86,348,2.473,349,2.473,350,2.473,351,1.73,352,1.521,353,2.473,354,2.871,355,2.871,356,2.247,357,2.473,358,2.871,359,2.473,360,2.871,361,2.871,362,3.542,363,2.871,364,2.871,365,4.241,366,4.241,367,1.86,368,2.871,369,2.871,370,2.871,371,2.871,372,2.871,373,2.871,374,2.211,375,4.345,376,2.871,377,2.871,378,2.871,379,2.871,380,2.871,381,2.871,382,3.267,383,2.871,384,1.86,385,1.434,386,2.871,387,2.871,388,2.871]],["title/modules/AreasModule.html",[41,1.099,267,2.275]],["body/modules/AreasModule.html",[2,1.527,3,0.216,4,0.194,5,0.194,16,0.018,24,0.378,25,0.655,31,0.216,32,0.144,39,0.012,40,0.012,41,1.597,43,1.676,44,2.219,47,2.457,48,1.856,49,1.856,51,2.593,116,2.497,119,3.307,120,3.134,122,2.907,124,1.763,125,2.685,128,2.196,267,4.528,286,3.134,288,3.985,350,3.571,356,3.707,357,3.571,389,3.571,390,3.571,391,4.145,392,4.145,393,2.685,394,4.145]],["title/injectables/AreasService.html",[53,0.959,286,1.691]],["body/injectables/AreasService.html",[3,0.093,4,0.083,5,0.083,9,0.155,10,0.85,11,1.998,16,0.018,17,0.647,19,1.566,20,1.412,21,1.43,23,1.483,24,0.293,25,0.281,31,0.093,32,0.062,33,0.931,34,1.24,35,1.081,39,0.007,40,0.007,53,0.742,54,0.757,57,1.003,58,2.275,60,0.725,61,3.033,65,0.943,66,1.547,67,0.841,68,1.241,69,0.943,70,2.146,72,2.823,73,2.856,74,1.379,82,1.25,83,1.646,86,1.25,89,3.071,96,3.638,105,1.299,112,1.653,119,2.542,122,0.943,123,2.688,124,0.757,131,2.249,137,1.367,138,2.275,142,3.171,144,1.501,145,2.275,148,2.348,155,0.797,156,1.003,185,2.856,186,1.072,205,1.153,208,1.153,209,1.371,210,1.533,215,1.072,217,1.371,218,1.25,223,3.033,232,1.533,235,1.533,286,1.307,312,3.033,319,1.25,329,1.072,334,2.515,347,1.153,349,1.533,382,2.249,384,2.404,385,1.854,393,1.153,395,1.533,396,2.92,397,2.92,398,2.92,399,2.92,400,1.78,401,2.92,402,1.78,403,2.92,404,1.78,405,1.78,406,2.92,407,1.78,408,2.92,409,1.78,410,2.05,411,2.92,412,1.78,413,2.92,414,1.78,415,2.92,416,3.071,417,2.05,418,1.371,419,1.78,420,1.78,421,1.78,422,1.78,423,2.515,424,1.78,425,1.78,426,1.78,427,1.78,428,1.78,429,1.78,430,1.78,431,1.78,432,1.78,433,3.712,434,3.712,435,1.78,436,1.78,437,4.127,438,1.78,439,2.249,440,2.92,441,2.92,442,1.78,443,1.78,444,1.78,445,1.78,446,3.652,447,3.308,448,1.78,449,1.78,450,1.78,451,2.859,452,1.533,453,2.859,454,1.78,455,2.92,456,1.78,457,1.78,458,1.78,459,1.78,460,1.78,461,1.78,462,1.78,463,1.78,464,1.78,465,2.92,466,2.92,467,2.515,468,2.515,469,1.78,470,2.92,471,1.78,472,1.533,473,2.05,474,1.78,475,1.78,476,1.78,477,1.78]],["title/controllers/AuthController.html",[0,1.004,478,2.446]],["body/controllers/AuthController.html",[0,0.73,2,0.764,3,0.143,4,0.128,5,0.128,7,1.373,9,0.24,10,1.195,11,1.865,14,2.774,15,0.868,16,0.018,17,0.494,19,1.195,20,0.997,21,1.091,23,1.195,24,0.348,25,0.434,31,0.214,32,0.143,33,0.876,34,1.642,35,1.195,39,0.009,40,0.009,60,0.553,68,1.168,70,2.142,72,1.746,112,2.247,113,1.373,137,0.828,138,2.604,155,2.442,186,1.655,280,1.78,304,1.655,339,1.94,346,1.655,351,1.655,352,1.456,367,2.659,385,2.724,478,2.659,479,2.116,480,2.747,481,4.105,482,3.537,483,2.747,484,2.576,485,4.887,486,3.537,487,2.747,488,2.747,489,2.576,490,3.537,491,2.747,492,2.116,493,1.298,494,2.367,495,2.322,496,2.367,497,2.116,498,4.234,499,1.929,500,3.786,501,2.367,502,2.367,503,2.367,504,1.892,505,2.367,506,2.367,507,2.367,508,2.367,509,2.367,510,4.697,511,3.537,512,3.537,513,4.697,514,3.537,515,3.537,516,3.537,517,3.828,518,3.537,519,3.537,520,2.659,521,3.537,522,3.537,523,3.537,524,3.537,525,3.537,526,3.537,527,4.697,528,3.537,529,3.537,530,2.116,531,2.367,532,2.367,533,2.367,534,2.367]],["title/modules/AuthModule.html",[41,1.099,268,2.446]],["body/modules/AuthModule.html",[2,1.53,3,0.217,4,0.194,5,0.194,16,0.018,24,0.365,25,0.657,31,0.217,32,0.144,39,0.012,40,0.012,41,1.601,43,1.681,44,2.223,47,2.462,48,1.862,49,1.862,51,2.598,105,1.455,128,2.913,189,2.505,268,4.698,272,4.22,280,2.693,283,3.582,478,3.991,499,2.92,500,4.746,535,3.582,536,3.582,537,4.158,538,4.537,539,4.158,540,4.158,541,4.158,542,4.158,543,4.158,544,4.158,545,4.158,546,4.158,547,3.582,548,4.158,549,4.158,550,4.158]],["title/injectables/AuthStrategy.html",[53,0.959,538,2.446]],["body/injectables/AuthStrategy.html",[3,0.232,4,0.208,5,0.208,9,0.388,10,1.673,11,1.939,16,0.018,17,0.691,19,1.294,20,1.08,21,1.182,22,3.722,23,1.294,24,0.332,25,0.702,31,0.232,32,0.154,33,2.03,39,0.013,40,0.013,53,1.46,54,1.891,60,0.599,105,2.227,186,2.679,304,2.679,305,4.95,352,2.356,439,3.425,517,3.122,538,3.722,547,3.831,551,3.831,552,4.447,553,5.745,554,4.447,555,4.426,556,4.447,557,3.831,558,3.831,559,4.447,560,4.447,561,4.447,562,4.447,563,4.447,564,4.447,565,4.447,566,4.447,567,4.447]],["title/classes/DicoDto.html",[32,0.131,329,2.275]],["body/classes/DicoDto.html",[3,0.201,4,0.18,5,0.18,9,0.335,15,1.449,16,0.018,17,0.824,20,1.439,24,0.201,31,0.309,32,0.221,39,0.012,40,0.012,60,0.923,83,3.34,93,3.34,137,1.537,142,3.139,144,1.556,145,2.039,148,2.224,312,2.169,313,1.173,314,2.702,315,1.52,316,2.964,317,2.964,318,2.964,319,2.702,320,2.759,326,2.702,327,4.437,328,1.347,329,3.146,330,4.564,331,2.319,568,3.848,569,3.848,570,3.848,571,3.848,572,3.848,573,3.848]],["title/classes/DiscordMsgReactionDto.html",[32,0.131,574,2.275]],["body/classes/DiscordMsgReactionDto.html",[3,0.189,4,0.169,5,0.169,9,0.316,15,1.458,16,0.018,17,0.829,24,0.261,31,0.299,32,0.215,39,0.011,40,0.011,60,0.929,112,1.394,137,1.532,144,1.464,183,4.565,313,1.103,315,1.458,320,2.763,328,1.267,504,1.394,574,3.017,575,2.542,576,4.03,577,4.422,578,4.422,579,4.422,580,4.771,581,4.422,582,3.857,583,4.03,584,3.62,585,5.74,586,3.62,587,3.62,588,3.62,589,3.62,590,3.62,591,3.62,592,2.926,593,2.789,594,2.181,595,2.789,596,2.542,597,2.181]],["title/classes/EnvironmentVariables.html",[32,0.131,598,2.908]],["body/classes/EnvironmentVariables.html",[3,0.198,4,0.177,5,0.177,9,0.331,15,1.244,16,0.018,17,0.76,24,0.27,31,0.307,32,0.204,39,0.012,40,0.012,60,0.919,70,1.81,105,1.328,137,1.275,144,2.379,189,2.286,208,2.458,215,3.115,304,2.286,313,1.156,315,1.505,320,1.897,327,3.35,328,1.328,384,2.458,385,1.896,517,2.664,520,3.35,598,3.983,599,2.664,600,5.882,601,5.882,602,5.882,603,5.882,604,5.068,605,5.171,606,3.794,607,3.794,608,3.794,609,3.794,610,3.794,611,3.794,612,3.794,613,5.171,614,3.794,615,3.794,616,2.664,617,3.794,618,4.455,619,3.983,620,3.269,621,3.269,622,3.269,623,5.171,624,3.794,625,3.794,626,3.794,627,3.794,628,3.794,629,3.794,630,3.794]],["title/classes/GithubDto.html",[32,0.131,631,2.651]],["body/classes/GithubDto.html",[3,0.262,4,0.235,5,0.235,9,0.438,15,1.063,16,0.017,17,0.605,24,0.262,31,0.262,32,0.234,35,2.104,39,0.014,40,0.014,60,0.908,313,1.532,315,1.808,616,3.531,631,4.36,632,3.874,633,4.833,634,5.029,635,5.029,636,4.332,637,4.332]],["title/classes/HookCreationDto.html",[32,0.131,150,2.651]],["body/classes/HookCreationDto.html",[3,0.247,4,0.222,5,0.222,9,0.414,15,1.388,16,0.017,17,0.789,24,0.247,31,0.247,32,0.208,39,0.014,40,0.014,60,0.884,74,3.1,137,1.391,144,2.421,150,4.205,248,4.607,313,1.446,315,1.743,320,2.607,326,3.332,327,4.251,328,1.66,583,3.332,638,4.088,639,5.653,640,4.745,641,4.745,642,4.745]],["title/classes/MailReactionDto.html",[32,0.131,594,2.275]],["body/classes/MailReactionDto.html",[3,0.205,4,0.184,5,0.184,9,0.343,15,1.357,16,0.017,17,0.772,24,0.277,31,0.313,32,0.223,39,0.012,40,0.012,60,0.864,112,2.308,137,1.536,144,1.593,183,4.21,313,1.2,315,1.544,320,2.803,328,1.378,504,2.308,574,2.373,575,2.766,576,2.766,577,3.034,578,3.034,579,3.034,580,4.085,581,3.034,582,3.034,583,3.724,592,3.031,593,3.034,594,3.195,595,4.619,596,4.21,597,2.373,643,3.939,644,3.939,645,3.939,646,3.939]],["title/controllers/OauthController.html",[0,1.004,647,2.651]],["body/controllers/OauthController.html",[0,0.935,2,0.978,3,0.183,4,0.164,5,0.164,7,1.757,9,0.307,10,1.428,11,2.03,15,1.038,16,0.018,17,0.59,19,1.428,20,1.372,21,1.305,23,1.428,24,0.364,25,0.556,31,0.183,32,0.122,33,1.121,34,1.174,35,1.024,39,0.011,40,0.011,58,1.863,60,0.824,66,1.863,67,1.661,68,2.086,69,1.863,70,1.717,72,2.403,74,2.318,105,1.717,112,2.633,113,2.451,120,2.531,137,0.71,140,3.178,155,2.739,156,1.982,180,2.197,339,2.67,346,2.119,351,2.119,352,1.863,353,3.029,362,2.469,367,2.278,375,3.029,555,4.711,647,3.445,648,3.029,649,2.709,650,4.907,651,4.907,652,3.516,653,3.516,654,3.516,655,3.685,656,3.516,657,3.516,658,3.029,659,3.029,660,3.516,661,3.516,662,3.516,663,3.516,664,3.516,665,3.516,666,3.516,667,3.516,668,3.029]],["title/classes/OauthCreationDto.html",[32,0.131,669,1.886]],["body/classes/OauthCreationDto.html",[3,0.2,4,0.179,5,0.179,9,0.335,15,1.342,16,0.018,17,0.763,24,0.2,31,0.346,32,0.238,39,0.012,40,0.012,60,0.855,137,1.551,148,1.343,180,2.65,313,1.169,315,1.517,320,2.828,328,1.343,484,1.813,489,1.813,493,1.813,504,2.443,592,1.813,669,2.603,670,2.312,671,3.335,672,3.335,673,3.335,674,3.837,675,3.837,676,3.837,677,3.837,678,3.335,679,3.565,680,2.312,681,2.486]],["title/classes/OauthDictionnaryDto.html",[32,0.131,682,2.446]],["body/classes/OauthDictionnaryDto.html",[3,0.195,4,0.174,5,0.174,9,0.325,15,1.497,16,0.018,17,0.851,21,1.359,24,0.195,31,0.267,32,0.203,39,0.012,40,0.012,60,0.953,74,2.755,137,1.537,180,1.671,248,4.095,313,1.137,315,1.488,320,2.795,328,1.306,410,2.62,592,2.415,655,2.248,682,3.311,683,2.874,684,5.024,685,5.024,686,4.095,687,5.024,688,5.024,689,5.024,690,3.731,691,3.731,692,3.731,693,3.731,694,3.731,695,3.731,696,3.731,697,3.731,698,3.731]],["title/modules/OauthModule.html",[41,1.099,269,2.446]],["body/modules/OauthModule.html",[2,1.673,3,0.249,4,0.223,5,0.223,16,0.018,24,0.36,25,0.755,31,0.249,32,0.166,39,0.014,40,0.014,41,1.751,43,1.932,44,2.432,47,2.694,48,2.14,49,2.14,51,2.842,120,3.255,122,3.187,123,2.387,124,2.032,128,2.531,269,4.709,647,4.622,659,4.117,699,4.778,700,4.778,701,4.778,702,4.778]],["title/injectables/OauthService.html",[53,0.959,120,1.691]],["body/injectables/OauthService.html",[3,0.12,4,0.108,5,0.108,9,0.201,10,1.044,11,2.095,14,1.524,16,0.018,17,0.648,19,1.569,20,1.386,21,1.433,23,1.448,24,0.298,25,0.363,31,0.12,32,0.08,33,1.143,34,1.801,35,1.044,39,0.008,40,0.008,53,0.911,54,0.978,57,1.297,58,2.635,60,0.726,61,2.021,65,1.899,66,1.899,67,1.087,68,1.524,69,1.219,70,2.267,72,2.694,73,2.654,74,3.404,105,2.087,120,1.606,123,2.979,124,0.978,137,1.469,138,3.267,142,1.219,180,2.67,185,1.386,215,1.386,217,1.772,218,1.616,243,1.982,347,1.49,384,1.49,385,1.791,410,3.093,451,1.772,453,1.772,473,3.492,530,1.772,555,3.831,649,3.831,655,2.654,658,1.982,671,1.297,672,1.297,673,1.297,682,1.49,703,1.982,704,3.585,705,3.585,706,3.585,707,3.585,708,2.301,709,3.585,710,2.301,711,3.585,712,2.301,713,3.585,714,2.301,715,3.585,716,2.301,717,2.301,718,1.616,719,2.301,720,1.982,721,2.301,722,2.301,723,2.301,724,2.301,725,2.301,726,2.301,727,2.301,728,2.301,729,2.301,730,2.301,731,2.301,732,2.301,733,2.301,734,3.585,735,2.301,736,2.301,737,2.301,738,2.301,739,2.301,740,2.301,741,2.301,742,2.301,743,3.089,744,3.585,745,2.301,746,2.301,747,2.301,748,2.301,749,2.301]],["title/controllers/ReactionsController.html",[0,1.004,750,2.651]],["body/controllers/ReactionsController.html",[0,0.722,2,0.755,3,0.142,4,0.127,5,0.127,7,1.356,9,0.237,10,1.184,11,2.121,15,1.146,16,0.018,17,0.652,19,1.578,20,1.48,21,1.441,22,1.758,23,1.578,24,0.283,25,0.429,31,0.142,32,0.094,33,0.866,34,0.907,35,0.79,39,0.009,40,0.009,60,0.821,70,2.133,104,1.906,105,0.95,112,2.433,113,1.356,137,0.821,140,2.635,145,1.438,170,3.758,189,2.451,223,1.53,382,2.091,385,2.032,439,2.091,467,2.338,468,2.338,495,1.922,574,3.265,576,1.906,594,3.265,596,1.906,597,3.265,678,2.293,750,2.856,751,2.091,752,3.133,753,4.068,754,4.068,755,4.068,756,2.714,757,3.505,758,2.714,759,2.714,760,4.068,761,2.714,762,2.714,763,4.068,764,2.714,765,2.714,766,4.068,767,2.714,768,2.714,769,4.068,770,2.338,771,3.758,772,3.758,773,2.338,774,2.714,775,2.338,776,1.906,777,2.338,778,2.338,779,2.714,780,2.338,781,2.714,782,2.714,783,4.203,784,2.714,785,2.714,786,2.714,787,2.714,788,2.338,789,2.714,790,2.714,791,2.714,792,2.714,793,2.714,794,2.714,795,2.714,796,2.714,797,2.714,798,2.714,799,2.714,800,2.714,801,2.714,802,2.714,803,2.714,804,2.714,805,2.714,806,2.714,807,4.068,808,2.714,809,2.714,810,2.714,811,2.714,812,2.714,813,2.714,814,2.714,815,2.714,816,2.714,817,2.714,818,2.714,819,2.714,820,2.714,821,2.714,822,2.714,823,2.714,824,2.714,825,2.714,826,2.714,827,2.714]],["title/modules/ReactionsModule.html",[41,1.099,270,2.446]],["body/modules/ReactionsModule.html",[2,1.677,3,0.25,4,0.224,5,0.224,16,0.017,24,0.361,25,0.758,31,0.25,32,0.167,39,0.014,40,0.014,41,1.755,43,1.939,44,2.438,47,2.7,48,2.148,49,2.148,51,2.848,122,3.194,123,2.396,124,2.039,128,2.54,270,4.713,495,3.438,750,4.63,773,4.131,828,4.131,829,4.131,830,4.795,831,4.795]],["title/injectables/ReactionsService.html",[53,0.959,718,2.651]],["body/injectables/ReactionsService.html",[3,0.295,4,0.265,5,0.265,16,0.017,24,0.295,25,0.895,31,0.295,32,0.197,39,0.015,40,0.015,53,1.695,54,2.409,718,4.685,832,4.88]],["title/classes/Repository.html",[32,0.131,633,2.446]],["body/classes/Repository.html",[3,0.256,4,0.23,5,0.23,9,0.429,16,0.017,17,0.737,24,0.256,31,0.256,32,0.232,35,2.162,39,0.014,40,0.014,60,0.941,137,1.236,313,1.498,315,1.783,616,3.453,631,3.453,632,3.789,633,4.652,636,4.237,637,4.237,833,6.125,834,6.125,835,4.918,836,4.918]],["title/controllers/ServicesController.html",[0,1.004,276,2.446]],["body/controllers/ServicesController.html",[0,0.906,2,0.948,3,0.178,4,0.159,5,0.159,7,1.703,9,0.297,10,1.398,11,2.144,15,1.175,16,0.018,17,0.668,19,1.618,20,1.349,21,1.478,22,4.12,23,1.618,24,0.332,25,0.539,31,0.178,32,0.118,33,1.087,34,1.139,35,0.993,39,0.011,40,0.011,60,0.913,65,2.944,71,2.626,105,1.945,112,2.709,140,3.908,144,1.942,148,1.68,155,3.194,156,1.922,274,3.133,276,3.11,339,1.611,346,2.054,351,2.054,352,1.806,362,3.903,837,2.937,838,4.137,839,4.137,840,4.137,841,3.409,842,3.409,843,3.409,844,5.082,845,3.409,846,3.409,847,3.409,848,3.409,849,3.409,850,3.409,851,2.937,852,3.409,853,3.409,854,3.409,855,3.409,856,3.409,857,3.409,858,3.409,859,3.409,860,3.409,861,3.409]],["title/modules/ServicesModule.html",[41,1.099,271,2.446]],["body/modules/ServicesModule.html",[2,1.662,3,0.247,4,0.221,5,0.221,16,0.017,24,0.342,25,0.747,31,0.247,32,0.164,39,0.014,40,0.014,41,1.739,43,1.912,44,2.416,47,2.676,48,2.117,49,2.117,51,2.823,271,4.769,274,4.317,276,4.244,851,4.073,862,4.073,863,4.728,864,4.073,865,4.728,866,5.148,867,4.728]],["title/injectables/ServicesService.html",[53,0.959,274,2.128]],["body/injectables/ServicesService.html",[3,0.18,4,0.161,5,0.161,9,0.301,10,1.41,11,2.15,14,2.06,16,0.018,17,0.73,19,1.629,20,1.473,21,1.488,23,1.629,24,0.292,25,0.546,31,0.18,32,0.12,33,1.545,34,1.153,35,1.005,39,0.011,40,0.011,53,1.231,54,1.468,57,1.946,58,3.214,60,0.754,61,2.731,65,2.965,66,2.567,67,1.632,68,2.06,69,1.829,70,1.208,71,2.66,72,2.717,73,3.372,74,2.289,80,2.975,82,2.425,83,2.731,84,4.174,86,2.425,102,2.975,103,3.732,104,3.402,105,1.959,144,2.679,148,2.236,227,2.975,274,2.731,686,2.425,838,4.174,839,4.174,840,5.227,868,2.975,869,3.453,870,4.845,871,3.453,872,4.845,873,3.453,874,3.453,875,4.845,876,3.453,877,3.453,878,3.453,879,3.453,880,3.453]],["title/classes/SmsReactionDto.html",[32,0.131,597,2.275]],["body/classes/SmsReactionDto.html",[3,0.218,4,0.195,5,0.195,9,0.365,15,1.168,16,0.017,17,0.664,24,0.288,31,0.322,32,0.228,39,0.013,40,0.013,60,0.744,112,1.611,137,1.535,144,2.499,183,4.339,313,1.275,315,1.607,320,2.802,328,1.464,504,1.611,574,2.521,575,2.938,576,2.938,577,3.223,578,3.223,579,3.223,580,5.062,581,3.223,582,3.223,583,3.877,592,3.105,593,3.223,594,2.521,595,3.223,596,2.938,597,3.326,881,4.184,882,4.184]],["title/classes/TokenCreationDto.html",[32,0.131,655,2.275]],["body/classes/TokenCreationDto.html",[3,0.235,4,0.211,5,0.211,9,0.393,15,1.226,16,0.017,17,0.697,24,0.235,31,0.302,32,0.222,39,0.013,40,0.013,60,0.781,74,2.129,137,1.535,180,2.869,248,3.164,313,1.373,315,1.687,320,2.805,328,1.577,410,4.498,592,2.738,655,3.491,682,2.919,683,3.471,684,3.882,685,3.882,686,3.164,687,3.882,688,3.882,689,3.882,883,4.506,884,4.506]],["title/injectables/UserAreas.html",[53,0.959,356,2]],["body/injectables/UserAreas.html",[3,0.126,4,0.113,5,0.113,9,0.211,10,1.086,11,1.96,14,1.586,16,0.018,17,0.615,19,1.488,20,1.562,21,1.359,23,1.324,24,0.317,25,0.382,26,2.619,31,0.126,32,0.084,33,1.189,34,1.246,35,1.086,39,0.008,40,0.008,53,0.948,54,1.029,57,1.365,58,2.707,60,0.689,61,3.286,65,1.976,66,1.976,67,1.144,68,1.586,69,1.283,70,2.04,72,2.583,74,2.415,82,1.7,83,1.365,86,1.7,89,3.31,93,2.102,96,3.31,105,1.305,137,1.177,138,2.707,142,2.41,144,0.979,145,1.283,148,2.04,185,3.513,205,3.31,209,3.504,223,2.881,239,2.086,240,2.086,286,2.289,339,1.144,356,1.976,374,1.865,416,3.31,418,1.865,423,2.086,437,3.31,446,3.937,447,3.937,452,2.086,472,2.086,473,1.7,485,1.865,492,3.504,686,2.619,885,2.086,886,3.729,887,3.729,888,3.213,889,4.549,890,2.421,891,3.729,892,2.421,893,3.729,894,5.83,895,4.403,896,2.421,897,3.729,898,2.421,899,2.421,900,2.421,901,2.421,902,2.421,903,1.7,904,2.421,905,3.729,906,5.11,907,2.421,908,2.421,909,3.729,910,3.729,911,3.729,912,2.421,913,2.421,914,2.421,915,2.421,916,3.729,917,2.421,918,2.421,919,2.421,920,2.421,921,2.421,922,2.421,923,2.421,924,3.729,925,2.421,926,2.421,927,2.421,928,2.421,929,2.421]],["title/classes/UserAuth.html",[32,0.131,155,1.691]],["body/classes/UserAuth.html",[0,0.768,3,0.151,4,0.135,5,0.135,9,0.252,11,1.298,14,2.376,16,0.018,17,0.609,19,0.841,20,0.701,21,0.768,24,0.352,25,0.456,31,0.222,32,0.148,33,1.359,34,1.691,35,1.241,39,0.01,40,0.01,60,0.682,68,1.229,70,2.182,72,1.812,112,1.949,113,1.443,137,1.128,138,3.157,155,2.888,186,2.567,280,1.871,304,1.741,313,0.88,315,1.241,339,2.013,346,1.741,351,1.741,352,1.531,367,2.76,385,2.792,478,1.871,479,2.225,484,2.013,485,3.9,486,2.489,489,2.013,490,2.489,492,2.225,493,1.365,494,2.489,495,2.392,496,2.489,497,2.225,498,4.362,499,2.029,500,3.9,501,2.489,502,2.489,503,2.489,504,2.294,505,3.671,506,2.489,507,2.489,508,2.489,509,2.489,510,4.814,511,3.671,512,3.671,513,4.814,514,3.671,515,3.671,516,3.671,517,3.924,518,3.671,519,3.671,520,2.76,521,3.671,522,3.671,523,3.671,524,3.671,525,3.671,526,3.671,527,4.814,528,3.671,529,3.671,530,2.225,531,2.489,532,2.489,533,2.489,534,2.489,930,4.261,931,2.889]],["title/controllers/UserController.html",[0,1.004,932,2.651]],["body/controllers/UserController.html",[0,0.738,2,0.772,3,0.145,4,0.13,5,0.13,7,1.387,9,0.242,10,1.204,11,2.192,14,3.006,15,1.239,16,0.018,17,0.705,19,1.706,20,1.423,21,1.558,23,1.706,24,0.332,25,0.439,31,0.145,32,0.096,33,0.885,34,1.382,35,1.204,39,0.009,40,0.009,60,0.79,65,2.191,70,1.73,72,2.103,105,1.448,112,2.62,113,1.387,155,3.244,156,1.565,205,1.798,339,2.336,346,1.672,347,1.798,348,3.564,351,1.672,352,1.471,356,2.62,362,4.115,495,1.955,504,2.11,669,2.738,752,3.187,780,2.391,844,5.243,888,3.564,932,2.905,933,2.391,934,3.564,935,4.137,936,4.137,937,2.391,938,2.776,939,2.776,940,2.776,941,2.776,942,2.776,943,2.776,944,2.776,945,2.776,946,2.776,947,2.776,948,2.776,949,2.776,950,2.776,951,2.776,952,2.776,953,2.391,954,2.391,955,2.391,956,2.776,957,2.776,958,2.776,959,2.776,960,2.776,961,2.776,962,2.776,963,2.776,964,2.776,965,2.776,966,2.776,967,2.776,968,2.776,969,2.776,970,2.776,971,2.776,972,2.776,973,2.776,974,2.776,975,2.776]],["title/classes/UserCreationDto.html",[32,0.131,489,1.784]],["body/classes/UserCreationDto.html",[3,0.2,4,0.179,5,0.179,9,0.335,15,1.342,16,0.018,17,0.763,24,0.2,31,0.346,32,0.238,39,0.012,40,0.012,60,0.855,137,1.551,148,1.343,180,1.718,313,1.169,315,1.517,320,2.828,328,1.343,484,1.813,489,2.462,493,1.813,504,2.635,592,1.813,669,1.917,670,2.312,671,2.163,672,2.163,673,2.163,678,3.741,679,3.998,680,3.565,681,2.486,976,3.837,977,3.837,978,3.837,979,3.837]],["title/classes/UserDto.html",[32,0.131,493,1.784]],["body/classes/UserDto.html",[3,0.195,4,0.174,5,0.174,9,0.325,15,1.39,16,0.018,17,0.79,24,0.195,31,0.343,32,0.236,39,0.012,40,0.012,60,0.885,137,1.551,148,2.041,180,1.671,313,1.137,315,1.488,320,2.827,328,1.306,484,1.763,489,1.763,493,2.415,504,2.613,592,1.763,669,1.864,670,2.248,671,2.103,672,2.103,673,2.103,678,3.704,679,3.959,680,2.248,681,3.777,980,3.731,981,3.731,982,3.731,983,3.731,984,3.731]],["title/classes/UserLoginDto.html",[32,0.131,484,1.784]],["body/classes/UserLoginDto.html",[3,0.211,4,0.189,5,0.189,9,0.353,15,1.142,16,0.017,17,0.649,21,1.436,24,0.211,31,0.352,32,0.241,39,0.012,40,0.012,60,0.727,137,1.551,148,1.416,180,1.812,313,1.232,315,1.572,320,2.828,328,1.416,484,2.551,489,1.911,493,1.911,504,2.496,592,1.911,669,2.021,670,2.437,671,2.28,672,2.28,673,2.28,678,3.808,679,4.07,680,2.437,681,2.62,985,4.045,986,4.045]],["title/modules/UserModule.html",[41,1.099,272,2.275]],["body/modules/UserModule.html",[2,1.444,3,0.199,4,0.178,5,0.178,16,0.018,24,0.371,25,0.603,31,0.199,32,0.133,39,0.012,40,0.012,41,1.511,43,1.543,44,2.099,47,2.325,48,1.709,49,1.709,51,2.453,119,3.228,120,3.06,122,2.75,123,1.906,124,1.622,125,2.472,128,2.021,272,4.568,286,3.06,356,3.93,393,2.472,495,3.505,866,4.472,903,2.679,932,4.142,954,3.287,955,3.287,987,3.287,988,3.816,989,3.287,990,3.816,991,3.816]],["title/injectables/UserService.html",[53,0.959,495,1.784]],["body/injectables/UserService.html",[3,0.104,4,0.093,5,0.093,9,0.174,10,0.931,11,2.112,14,2.281,16,0.018,17,0.678,19,1.641,20,1.369,21,1.499,23,1.562,24,0.306,25,0.315,31,0.104,32,0.069,33,1.02,34,1.068,35,0.931,39,0.007,40,0.007,53,0.812,54,0.847,57,1.122,58,2.43,60,0.76,61,3.024,65,2.662,66,1.694,67,0.941,68,1.36,69,1.055,70,0.697,72,2.697,73,2.414,105,1.758,112,1.543,122,1.055,123,2.817,124,0.847,137,1.304,138,3.204,148,1.402,155,2.054,156,1.122,180,0.892,198,3.952,201,3.952,202,2.463,208,1.29,218,1.398,223,1.122,237,1.398,254,1.715,304,1.199,339,0.941,347,1.29,367,1.29,374,1.533,384,3.652,385,2.68,416,2.071,417,3.221,418,1.533,437,2.972,446,3.534,447,1.533,451,2.463,453,2.463,473,2.813,482,2.754,484,2.167,489,2.167,493,0.941,495,1.511,504,2.257,649,2.463,669,2.292,671,1.122,672,1.122,673,1.122,678,2.586,679,1.199,680,1.199,720,1.715,743,1.715,752,2.463,844,4.781,934,2.754,937,2.754,953,1.715,992,1.715,993,3.197,994,2.463,995,3.197,996,1.991,997,1.991,998,3.197,999,1.991,1000,3.197,1001,1.991,1002,3.197,1003,1.991,1004,3.197,1005,1.991,1006,3.197,1007,1.991,1008,1.991,1009,1.991,1010,1.991,1011,1.991,1012,2.754,1013,5.365,1014,3.197,1015,3.197,1016,1.991,1017,1.715,1018,1.991,1019,1.991,1020,4.007,1021,1.991,1022,1.991,1023,1.991,1024,1.991,1025,1.991,1026,1.715,1027,1.991,1028,1.991,1029,1.991,1030,3.197,1031,1.991,1032,1.991,1033,4.007,1034,1.991,1035,1.991,1036,1.991,1037,1.991,1038,1.991,1039,1.991,1040,1.991,1041,1.991,1042,1.991,1043,1.991,1044,1.991,1045,1.991,1046,1.991,1047,1.991,1048,1.991,1049,1.991,1050,1.991]],["title/classes/Username.html",[32,0.131,504,1.453]],["body/classes/Username.html",[3,0.219,4,0.196,5,0.196,9,0.366,15,0.888,16,0.017,17,0.505,24,0.219,31,0.357,32,0.244,39,0.013,40,0.013,60,0.565,137,1.552,148,1.469,180,1.879,313,1.279,315,1.611,320,2.831,328,1.469,484,1.983,489,1.983,493,1.983,504,2.757,592,1.983,669,2.097,670,2.528,671,2.366,672,2.366,673,2.366,678,3.489,679,3.729,680,2.528,681,2.719,1051,4.197]],["title/controllers/WebhooksController.html",[0,1.004,1052,2.651]],["body/controllers/WebhooksController.html",[0,0.932,2,0.976,3,0.183,4,0.164,5,0.164,7,1.752,9,0.306,10,1.426,11,2.158,15,1.194,16,0.018,17,0.679,19,1.643,20,1.37,21,1.501,22,3.656,23,1.643,24,0.294,25,0.554,31,0.183,32,0.122,33,1.119,34,1.636,35,1.426,39,0.011,40,0.011,70,1.227,112,2.726,113,1.752,142,3.405,145,2.595,148,1.227,185,2.113,223,1.977,231,3.021,236,4.219,237,2.463,286,2.193,359,3.021,639,3.021,757,4.219,903,2.463,1052,3.439,1053,3.021,1054,3.507,1055,4.898,1056,4.898,1057,4.898,1058,3.507,1059,3.507,1060,3.507,1061,4.898,1062,3.507,1063,3.507,1064,4.898,1065,3.507,1066,2.951,1067,3.021,1068,3.507,1069,3.507,1070,3.507,1071,3.507,1072,3.507,1073,3.507,1074,5.644,1075,3.507,1076,3.507,1077,3.507,1078,3.507,1079,3.507,1080,5.644,1081,3.507,1082,4.898,1083,3.507]],["title/modules/WebhooksModule.html",[41,1.099,273,2.446]],["body/modules/WebhooksModule.html",[2,1.527,3,0.216,4,0.194,5,0.194,16,0.018,24,0.378,25,0.655,31,0.216,32,0.144,39,0.012,40,0.012,41,1.597,43,1.676,44,2.219,47,2.457,48,1.856,49,1.856,51,2.593,119,3.307,120,3.134,122,2.907,124,1.763,125,2.685,128,2.196,267,2.497,273,4.868,286,3.134,393,2.685,903,2.911,1052,4.319,1066,4.216,1067,3.571,1084,3.571,1085,3.571,1086,4.145,1087,4.145,1088,4.145]],["title/injectables/WebhooksService.html",[53,0.959,1066,2.275]],["body/injectables/WebhooksService.html",[3,0.234,4,0.21,5,0.21,9,0.392,10,1.683,11,1.948,15,0.95,16,0.018,17,0.695,19,1.307,20,1.09,21,1.194,23,1.307,24,0.334,25,0.71,31,0.234,32,0.156,33,1.844,34,1.5,35,1.307,39,0.013,40,0.013,53,1.469,54,1.91,60,0.605,119,3.191,160,3.869,161,3.154,393,2.909,1066,3.484,1089,3.869,1090,6.753,1091,4.491,1092,4.491,1093,5.782,1094,5.782,1095,4.491,1096,4.491,1097,4.491]],["title/coverage.html",[1098,3.97]],["body/coverage.html",[0,1.775,1,1.804,5,0.12,6,2.213,16,0.018,26,1.804,28,1.548,32,0.252,39,0.009,40,0.009,53,1.724,55,2.213,60,0.346,106,1.804,107,2.213,119,1.214,120,1.15,129,2.213,150,1.804,155,1.15,208,5.035,255,1.804,256,2.213,259,1.548,274,1.448,276,1.664,281,1.979,286,1.15,288,1.664,308,2.213,312,1.448,314,3.314,329,1.548,331,1.548,333,2.213,339,1.214,356,1.361,385,1.283,395,2.213,416,1.664,417,1.804,478,1.664,479,3.006,484,1.214,489,1.214,493,1.214,495,1.214,504,0.989,538,1.664,551,2.213,574,1.548,575,3.314,594,1.548,597,1.548,598,1.979,599,2.74,620,5.344,631,1.804,632,3.006,633,1.664,638,2.213,647,1.804,648,2.213,655,1.548,669,1.283,670,3.415,682,1.664,683,3.006,703,2.213,718,1.804,750,1.804,751,3.635,776,1.804,832,2.213,837,2.213,868,2.213,885,2.213,932,1.804,933,2.213,992,2.213,994,1.979,1052,1.804,1053,2.213,1066,1.548,1089,2.213,1098,1.979,1099,2.569,1100,2.569,1101,2.569,1102,6.202,1103,6.545,1104,5.668,1105,3.903,1106,5.271,1107,4.719,1108,6.202,1109,6.784,1110,2.213,1111,2.213,1112,2.569,1113,3.701,1114,2.213,1115,4.719,1116,3.006,1117,2.569,1118,2.569]],["title/dependencies.html",[44,1.836,1119,2.716]],["body/dependencies.html",[16,0.018,20,0.991,25,0.645,32,0.189,39,0.012,40,0.012,44,1.651,67,1.929,68,2.596,75,3.517,124,1.736,161,2.866,280,2.644,328,1.429,352,2.163,497,3.144,499,2.866,557,4.68,558,4.68,616,2.866,668,4.68,770,3.517,771,3.144,772,4.184,776,2.866,783,3.517,1012,3.517,1120,4.082,1121,6.508,1122,4.082,1123,4.082,1124,4.082,1125,4.082,1126,5.432,1127,4.082,1128,5.432,1129,4.082,1130,4.082,1131,4.082,1132,4.082,1133,3.517,1134,4.082,1135,5.432,1136,4.082,1137,5.432,1138,5.432,1139,4.082,1140,4.082,1141,4.082,1142,4.082,1143,4.082,1144,4.082,1145,4.082,1146,4.082,1147,4.082,1148,4.082,1149,4.082,1150,4.082,1151,4.082,1152,4.082,1153,4.082,1154,4.082,1155,4.082,1156,4.082,1157,4.082,1158,4.082,1159,4.082]],["title/miscellaneous/enumerations.html",[1160,1.67,1161,3.912]],["body/miscellaneous/enumerations.html",[9,0.468,16,0.017,39,0.015,40,0.015,89,3.479,96,3.479,215,3.894,437,4.661,520,4.187,599,3.771,604,5.568,618,5.568,619,4.979,895,5.568,1113,3.771,1160,2.845,1161,4.626,1162,4.137,1163,4.626]],["title/miscellaneous/functions.html",[1160,1.67,1164,3.912]],["body/miscellaneous/functions.html",[9,0.386,14,1.885,16,0.017,19,2.075,20,1.731,21,1.895,26,4.026,39,0.013,40,0.013,60,0.938,137,1.157,189,2.67,202,4.416,281,4.416,416,3.714,417,4.026,599,3.112,621,3.818,622,4.939,994,4.416,1110,3.818,1111,5.475,1113,3.112,1114,4.939,1116,3.414,1133,3.818,1160,2.348,1162,5.176,1163,3.818,1164,3.818,1165,4.432,1166,3.818,1167,4.432,1168,4.432,1169,5.789,1170,6.355,1171,4.432,1172,4.939,1173,4.432,1174,4.432]],["title/index.html",[9,0.275,1175,3.152,1176,3.152]],["body/index.html",[4,0.2,16,0.017,39,0.013,40,0.013,77,3.696,93,2.419,215,3.382,222,3.696,520,2.779,619,3.305,633,2.779,1017,3.696,1098,3.305,1177,4.29,1178,4.29,1179,5.613,1180,4.29,1181,4.29,1182,4.29,1183,4.29,1184,4.29,1185,6.256,1186,4.29,1187,4.29,1188,4.29,1189,7.199,1190,4.29,1191,4.29,1192,7.066,1193,4.29,1194,4.29,1195,5.613,1196,4.29,1197,4.29,1198,4.29,1199,5.613,1200,4.29,1201,4.29,1202,4.29,1203,5.613,1204,5.613,1205,4.29,1206,4.29,1207,4.29,1208,4.29,1209,4.29,1210,3.696,1211,4.29,1212,4.29,1213,4.29,1214,4.29,1215,4.29,1216,4.29,1217,4.29,1218,4.29,1219,3.696,1220,4.29,1221,4.29,1222,4.29,1223,4.29,1224,4.29,1225,4.29,1226,3.696]],["title/modules.html",[43,2.084]],["body/modules.html",[16,0.014,39,0.014,40,0.014,42,3.198,43,1.996,116,2.974,263,3.466,267,2.974,268,3.198,269,3.198,270,3.198,271,3.198,272,2.974,273,3.198,1210,6.569,1227,7.624,1228,7.624,1229,7.624]],["title/overview.html",[1230,4.44]],["body/overview.html",[2,0.847,16,0.018,28,3.145,39,0.01,40,0.01,42,3.944,43,1.232,44,1.791,45,2.624,46,2.624,47,1.984,48,1.364,49,1.364,54,1.295,116,3.95,117,2.624,118,2.624,119,3.002,120,2.936,259,3.145,263,5.329,264,2.624,265,2.624,266,2.624,267,4.247,268,4.247,269,3.944,270,3.944,271,4.116,272,4.429,273,4.566,274,3.787,286,2.727,313,0.928,356,3.559,389,2.624,390,2.624,495,3.174,535,2.624,536,2.624,538,3.381,828,2.624,829,2.624,862,2.624,864,2.624,987,2.624,989,2.624,1026,3.816,1066,3.145,1084,2.624,1085,2.624,1230,2.624,1231,3.046,1232,3.046]],["title/properties.html",[315,1.322,1119,2.716]],["body/properties.html",[16,0.017,39,0.015,40,0.015,93,3.262,315,1.684,788,4.985,1219,4.985,1226,4.985,1233,5.786,1234,5.786]],["title/miscellaneous/typealiases.html",[1160,1.67,1235,4.541]],["body/miscellaneous/typealiases.html",[9,0.5,16,0.015,39,0.015,40,0.015,60,0.906,140,3.716,1113,4.028,1160,3.039,1162,5.178,1169,5.791,1172,5.791,1236,5.737]],["title/miscellaneous/variables.html",[1160,1.67,1237,3.912]],["body/miscellaneous/variables.html",[9,0.45,16,0.017,39,0.014,40,0.014,70,1.807,105,1.807,170,3.978,178,5.873,186,3.111,339,2.982,437,4.416,751,3.978,771,3.978,772,3.978,775,4.449,776,4.432,777,4.449,778,4.449,1116,3.978,1160,2.736,1166,4.449,1237,4.449,1238,6.312,1239,5.164,1240,5.164,1241,5.164,1242,5.164,1243,5.164]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":208,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"classes/EnvironmentVariables.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1233,"title":{},"body":{"properties.html":{}}}],["0.0.5",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["0.11.13",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":743,"title":{},"body":{"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["1.0.2",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["1.1.6",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["1.1.8",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["1.2.2",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["1.6.4",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["1000",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["11",{"_index":1231,"title":{},"body":{"overview.html":{}}}],["15076936709",{"_index":824,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["18",{"_index":1232,"title":{},"body":{"overview.html":{}}}],["24",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["24h",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{}}}],["27.1.0",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["3.1.2",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["3.3.7",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["3.75.0",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["6.0.0",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["8.0.0",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["about.controller",{"_index":52,"title":{},"body":{"modules/AboutModule.html":{}}}],["about.json",{"_index":8,"title":{},"body":{"controllers/AboutController.html":{}}}],["about.service",{"_index":29,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{}}}],["about/about.module",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["aboutcontroller",{"_index":1,"title":{"controllers/AboutController.html":{}},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"coverage.html":{}}}],["aboutjson",{"_index":56,"title":{},"body":{"injectables/AboutService.html":{}}}],["aboutjson(ip",{"_index":62,"title":{},"body":{"injectables/AboutService.html":{}}}],["aboutmodule",{"_index":42,"title":{"modules/AboutModule.html":{}},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aboutservice",{"_index":28,"title":{"injectables/AboutService.html":{}},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"coverage.html":{},"overview.html":{}}}],["access",{"_index":901,"title":{},"body":{"injectables/UserAreas.html":{}}}],["action",{"_index":89,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"miscellaneous/enumerations.html":{}}}],["action.description",{"_index":94,"title":{},"body":{"injectables/AboutService.html":{}}}],["action.id",{"_index":251,"title":{},"body":{"injectables/ActionsService.html":{}}}],["action.name",{"_index":92,"title":{},"body":{"injectables/AboutService.html":{}}}],["action.rowcount",{"_index":419,"title":{},"body":{"injectables/AreasService.html":{}}}],["action.rows",{"_index":422,"title":{},"body":{"injectables/AreasService.html":{}}}],["action.rows[0",{"_index":461,"title":{},"body":{"injectables/AreasService.html":{}}}],["action.rows[0].id",{"_index":474,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_dico",{"_index":450,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_dico[\"name",{"_index":460,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_dico[\"service_id",{"_index":457,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_id",{"_index":316,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{}}}],["action_name",{"_index":139,"title":{},"body":{"injectables/ActionsService.html":{}}}],["action_name:string",{"_index":162,"title":{},"body":{"injectables/ActionsService.html":{}}}],["action_params",{"_index":317,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{}}}],["action_service",{"_index":456,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_service[\"name\"].tostring",{"_index":459,"title":{},"body":{"injectables/AreasService.html":{}}}],["action_type",{"_index":374,"title":{},"body":{"controllers/AreasController.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["actionarea",{"_index":1055,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actionarea(@body",{"_index":1078,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actionarea(body",{"_index":1058,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongithub",{"_index":1056,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongithub(@req",{"_index":1070,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongithub(req",{"_index":1060,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongitlab",{"_index":1057,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongitlab(@body",{"_index":1075,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actiongitlab(body",{"_index":1063,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["actions",{"_index":103,"title":{},"body":{"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ServicesService.html":{}}}],["actions.controller",{"_index":126,"title":{},"body":{"modules/ActionsModule.html":{}}}],["actions.dto",{"_index":157,"title":{},"body":{"injectables/ActionsService.html":{}}}],["actions.rows",{"_index":880,"title":{},"body":{"injectables/ServicesService.html":{}}}],["actions.service",{"_index":127,"title":{},"body":{"modules/ActionsModule.html":{}}}],["actions/actions.module",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["actionscontroller",{"_index":106,"title":{"controllers/ActionsController.html":{}},"body":{"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"coverage.html":{}}}],["actionservice",{"_index":1093,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["actionsmodule",{"_index":116,"title":{"modules/ActionsModule.html":{}},"body":{"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules.html":{},"overview.html":{}}}],["actionsservice",{"_index":119,"title":{"injectables/ActionsService.html":{}},"body":{"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"overview.html":{}}}],["actionstab",{"_index":87,"title":{},"body":{"injectables/AboutService.html":{}}}],["actionstab.push(topush",{"_index":95,"title":{},"body":{"injectables/AboutService.html":{}}}],["added",{"_index":667,"title":{},"body":{"controllers/OauthController.html":{}}}],["addoauthtousr",{"_index":934,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addoauthtousr(@user",{"_index":958,"title":{},"body":{"controllers/UserController.html":{}}}],["addoauthtousr(usr",{"_index":937,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["adictionnary",{"_index":82,"title":{},"body":{"injectables/AboutService.html":{},"injectables/AreasService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{}}}],["aliases",{"_index":1236,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["alternative",{"_index":904,"title":{},"body":{"injectables/UserAreas.html":{}}}],["amazing",{"_index":1211,"title":{},"body":{"index.html":{}}}],["aor",{"_index":894,"title":{},"body":{"injectables/UserAreas.html":{}}}],["aorrea",{"_index":895,"title":{},"body":{"injectables/UserAreas.html":{},"miscellaneous/enumerations.html":{}}}],["aorrea.action",{"_index":906,"title":{},"body":{"injectables/UserAreas.html":{}}}],["aorrea.reaction",{"_index":925,"title":{},"body":{"injectables/UserAreas.html":{}}}],["app",{"_index":1191,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":260,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":255,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":197,"title":{},"body":{"injectables/ActionsService.html":{}}}],["applications",{"_index":1184,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":263,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":259,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["area",{"_index":223,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/ReactionsController.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{}}}],["area.id_act",{"_index":226,"title":{},"body":{"injectables/ActionsService.html":{}}}],["area.id_react",{"_index":224,"title":{},"body":{"injectables/ActionsService.html":{}}}],["area.rows",{"_index":426,"title":{},"body":{"injectables/AreasService.html":{}}}],["area[\"id",{"_index":923,"title":{},"body":{"injectables/UserAreas.html":{}}}],["area[\"id_act",{"_index":907,"title":{},"body":{"injectables/UserAreas.html":{}}}],["area[\"id_react",{"_index":908,"title":{},"body":{"injectables/UserAreas.html":{}}}],["areacreationdto",{"_index":312,"title":{"classes/AreaCreationDto.html":{}},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"coverage.html":{}}}],["areaid",{"_index":331,"title":{"classes/AreaId.html":{}},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"classes/DicoDto.html":{},"coverage.html":{}}}],["areakinaemba@gmail.com",{"_index":791,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["areanumber",{"_index":886,"title":{},"body":{"injectables/UserAreas.html":{}}}],["areanumber(userid",{"_index":891,"title":{},"body":{"injectables/UserAreas.html":{}}}],["areas",{"_index":205,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{}}}],["areas.controller",{"_index":394,"title":{},"body":{"modules/AreasModule.html":{}}}],["areas.dto",{"_index":349,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{}}}],["areas.length",{"_index":928,"title":{},"body":{"injectables/UserAreas.html":{}}}],["areas.rows",{"_index":210,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{}}}],["areas.service",{"_index":350,"title":{},"body":{"controllers/AreasController.html":{},"modules/AreasModule.html":{}}}],["areas/areas.controller",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["areas/areas.module",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["areas/areas.service",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["areascontroller",{"_index":288,"title":{"controllers/AreasController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"coverage.html":{}}}],["areaservice",{"_index":889,"title":{},"body":{"injectables/UserAreas.html":{}}}],["areasmodule",{"_index":267,"title":{"modules/AreasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/WebhooksModule.html":{},"modules.html":{},"overview.html":{}}}],["areasservice",{"_index":286,"title":{"injectables/AreasService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"modules/UserModule.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"coverage.html":{},"overview.html":{}}}],["areasservices",{"_index":359,"title":{},"body":{"controllers/AreasController.html":{},"controllers/WebhooksController.html":{}}}],["assert/strict",{"_index":900,"title":{},"body":{"injectables/UserAreas.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["aussi",{"_index":471,"title":{},"body":{"injectables/AreasService.html":{}}}],["auth",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":478,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserAuth.html":{},"coverage.html":{}}}],["authguard",{"_index":351,"title":{},"body":{"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":268,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1219,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":193,"title":{},"body":{"injectables/ActionsService.html":{}}}],["authstrategy",{"_index":538,"title":{"injectables/AuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":72,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":159,"title":{},"body":{"injectables/ActionsService.html":{}}}],["axiosrequestconfig",{"_index":158,"title":{},"body":{"injectables/ActionsService.html":{}}}],["backend_environment",{"_index":600,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["backend_port",{"_index":601,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["backendenvironment",{"_index":604,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["backers",{"_index":1212,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":347,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"bad",{"_index":440,"title":{},"body":{"injectables/AreasService.html":{}}}],["badrequestexception(\"can't",{"_index":386,"title":{},"body":{"controllers/AreasController.html":{}}}],["badrequestexception(\"email",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception(\"fields",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception(\"missing",{"_index":435,"title":{},"body":{"injectables/AreasService.html":{}}}],["badrequestexception(\"user",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('one",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(usr.password",{"_index":1034,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hashsync(usr.password",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["bearer",{"_index":194,"title":{},"body":{"injectables/ActionsService.html":{}}}],["body",{"_index":112,"title":{},"body":{"controllers/ActionsController.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"classes/SmsReactionDto.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{}}}],["body.action_id",{"_index":433,"title":{},"body":{"injectables/AreasService.html":{}}}],["body.action_params[key",{"_index":438,"title":{},"body":{"injectables/AreasService.html":{}}}],["body.action_type",{"_index":1080,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["body.duration",{"_index":1040,"title":{},"body":{"injectables/UserService.html":{}}}],["body.fielddescription",{"_index":812,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["body.generated_at",{"_index":1041,"title":{},"body":{"injectables/UserService.html":{}}}],["body.id",{"_index":1083,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["body.id}).topromise",{"_index":376,"title":{},"body":{"controllers/AreasController.html":{}}}],["body.message",{"_index":823,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["body.newusername",{"_index":819,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["body.number",{"_index":825,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["body.project_id",{"_index":1077,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["body.reaction_id",{"_index":434,"title":{},"body":{"injectables/AreasService.html":{}}}],["body.reaction_params[key",{"_index":443,"title":{},"body":{"injectables/AreasService.html":{}}}],["body.refresh_token",{"_index":1039,"title":{},"body":{"injectables/UserService.html":{}}}],["body.servicename",{"_index":666,"title":{},"body":{"controllers/OauthController.html":{}}}],["body.title",{"_index":807,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["body.token",{"_index":1038,"title":{},"body":{"injectables/UserService.html":{}}}],["body.userid",{"_index":1082,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["body.username",{"_index":963,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":582,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["bootstrap",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":179,"title":{},"body":{"injectables/ActionsService.html":{}}}],["browse",{"_index":1229,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1227,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1180,"title":{},"body":{"index.html":{}}}],["callreaction",{"_index":396,"title":{},"body":{"injectables/AreasService.html":{}}}],["callreaction(params",{"_index":401,"title":{},"body":{"injectables/AreasService.html":{}}}],["calltracker",{"_index":899,"title":{},"body":{"injectables/UserAreas.html":{}}}],["case",{"_index":166,"title":{},"body":{"injectables/ActionsService.html":{}}}],["catch",{"_index":201,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserService.html":{}}}],["catch((err",{"_index":801,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["change",{"_index":1046,"title":{},"body":{"injectables/UserService.html":{}}}],["changed",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{}}}],["changeusername",{"_index":752,"title":{},"body":{"controllers/ReactionsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changeusername(@body",{"_index":816,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["changeusername(@user",{"_index":961,"title":{},"body":{"controllers/UserController.html":{}}}],["changeusername(body",{"_index":756,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["changeusername(userid",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["changeusername(usr",{"_index":940,"title":{},"body":{"controllers/UserController.html":{}}}],["checkbodycreatearea",{"_index":397,"title":{},"body":{"injectables/AreasService.html":{}}}],["checkbodycreatearea(body",{"_index":403,"title":{},"body":{"injectables/AreasService.html":{}}}],["checkisthereresult",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkisthereresult(res",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["city:string,previous_value:string,service:string",{"_index":204,"title":{},"body":{"injectables/ActionsService.html":{}}}],["class",{"_index":32,"title":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/Repository.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{}},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":313,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/Repository.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{},"overview.html":{}}}],["client",{"_index":75,"title":{},"body":{"injectables/AboutService.html":{},"dependencies.html":{}}}],["client_id",{"_index":684,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["client_secret",{"_index":685,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["cluster_aboutmodule",{"_index":45,"title":{},"body":{"modules/AboutModule.html":{},"overview.html":{}}}],["cluster_aboutmodule_providers",{"_index":46,"title":{},"body":{"modules/AboutModule.html":{},"overview.html":{}}}],["cluster_actionsmodule",{"_index":117,"title":{},"body":{"modules/ActionsModule.html":{},"overview.html":{}}}],["cluster_actionsmodule_providers",{"_index":118,"title":{},"body":{"modules/ActionsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_areasmodule",{"_index":389,"title":{},"body":{"modules/AreasModule.html":{},"overview.html":{}}}],["cluster_areasmodule_providers",{"_index":390,"title":{},"body":{"modules/AreasModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":699,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":700,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_reactionsmodule",{"_index":828,"title":{},"body":{"modules/ReactionsModule.html":{},"overview.html":{}}}],["cluster_reactionsmodule_providers",{"_index":829,"title":{},"body":{"modules/ReactionsModule.html":{},"overview.html":{}}}],["cluster_servicesmodule",{"_index":862,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_servicesmodule_exports",{"_index":864,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_servicesmodule_providers",{"_index":863,"title":{},"body":{"modules/ServicesModule.html":{}}}],["cluster_usermodule",{"_index":987,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":989,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":988,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_webhooksmodule",{"_index":1084,"title":{},"body":{"modules/WebhooksModule.html":{},"overview.html":{}}}],["cluster_webhooksmodule_providers",{"_index":1085,"title":{},"body":{"modules/WebhooksModule.html":{},"overview.html":{}}}],["confidential",{"_index":176,"title":{},"body":{"injectables/ActionsService.html":{}}}],["confidential_issues_events",{"_index":177,"title":{},"body":{"injectables/ActionsService.html":{}}}],["config",{"_index":189,"title":{},"body":{"injectables/ActionsService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/EnvironmentVariables.html":{},"controllers/ReactionsController.html":{},"miscellaneous/functions.html":{}}}],["config.body",{"_index":797,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["config.recipient",{"_index":793,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["config.subject",{"_index":795,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["config.username",{"_index":794,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["configmodule",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserAuth.html":{}}}],["connect('95d7f3e348ada34e2587a04a86442e33",{"_index":785,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["connectionuri",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":228,"title":{},"body":{"injectables/ActionsService.html":{}}}],["console.log(\"eh",{"_index":465,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(\"hello",{"_index":1079,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["console.log(\"je",{"_index":782,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["console.log(\"no",{"_index":253,"title":{},"body":{"injectables/ActionsService.html":{}}}],["console.log(\"params",{"_index":420,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(\"reaction",{"_index":427,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(\"received",{"_index":1081,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["console.log(\"test",{"_index":799,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["console.log('hello",{"_index":1096,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["console.log(action.rows",{"_index":421,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(action_name",{"_index":164,"title":{},"body":{"injectables/ActionsService.html":{}}}],["console.log(area",{"_index":425,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(err",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(err.statuscode",{"_index":802,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["console.log(error",{"_index":203,"title":{},"body":{"injectables/ActionsService.html":{}}}],["console.log(id",{"_index":475,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(message",{"_index":827,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["console.log(params",{"_index":231,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/WebhooksController.html":{}}}],["console.log(r",{"_index":377,"title":{},"body":{"controllers/AreasController.html":{}}}],["console.log(reaction",{"_index":429,"title":{},"body":{"injectables/AreasService.html":{}}}],["console.log(service",{"_index":243,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/OauthService.html":{}}}],["console.log(token",{"_index":739,"title":{},"body":{"injectables/OauthService.html":{}}}],["console.log(userid",{"_index":740,"title":{},"body":{"injectables/OauthService.html":{}}}],["const",{"_index":70,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"classes/EnvironmentVariables.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":33,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["constructor(actionservice",{"_index":1091,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["constructor(data",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["constructor(pool",{"_index":57,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":261,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":196,"title":{},"body":{"injectables/ActionsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AboutController.html":{},"controllers/ActionsController.html":{},"controllers/AppController.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"controllers/UserController.html":{},"controllers/WebhooksController.html":{}},"body":{"controllers/AboutController.html":{},"controllers/ActionsController.html":{},"controllers/AppController.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"controllers/WebhooksController.html":{},"coverage.html":{}}}],["controller('about.json",{"_index":30,"title":{},"body":{"controllers/AboutController.html":{}}}],["controller('actions",{"_index":114,"title":{},"body":{"controllers/ActionsController.html":{}}}],["controller('areas",{"_index":358,"title":{},"body":{"controllers/AreasController.html":{}}}],["controller('auth",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["controller('oauth",{"_index":660,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('reactions",{"_index":779,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["controller('services",{"_index":853,"title":{},"body":{"controllers/ServicesController.html":{}}}],["controller('user",{"_index":956,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('webhooks",{"_index":1068,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"overview.html":{}}}],["cookie",{"_index":1133,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["cors_origin",{"_index":602,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["coverage",{"_index":1098,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create({body",{"_index":822,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["createaction",{"_index":130,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createaction(params",{"_index":136,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createarea",{"_index":131,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{}}}],["createarea(@user",{"_index":363,"title":{},"body":{"controllers/AreasController.html":{}}}],["createarea(id",{"_index":143,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createarea(user",{"_index":336,"title":{},"body":{"controllers/AreasController.html":{}}}],["createarea(userid",{"_index":406,"title":{},"body":{"injectables/AreasService.html":{}}}],["created",{"_index":368,"title":{},"body":{"controllers/AreasController.html":{}}}],["created_at",{"_index":681,"title":{},"body":{"classes/OauthCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{}}}],["createhook",{"_index":108,"title":{},"body":{"controllers/ActionsController.html":{}}}],["createhook(@body",{"_index":115,"title":{},"body":{"controllers/ActionsController.html":{}}}],["createhook(body",{"_index":109,"title":{},"body":{"controllers/ActionsController.html":{}}}],["createhookgitlab",{"_index":132,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createhookgitlab(params",{"_index":149,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createparamdecorator(async",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createreaction",{"_index":398,"title":{},"body":{"injectables/AreasService.html":{}}}],["createreaction(servicename",{"_index":408,"title":{},"body":{"injectables/AreasService.html":{}}}],["createweather",{"_index":133,"title":{},"body":{"injectables/ActionsService.html":{}}}],["createweather(params",{"_index":152,"title":{},"body":{"injectables/ActionsService.html":{}}}],["cron",{"_index":160,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/WebhooksService.html":{}}}],["cron('*/30",{"_index":1094,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["crypto",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["ctx",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_time",{"_index":78,"title":{},"body":{"injectables/AboutService.html":{}}}],["data",{"_index":186,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/UserAuth.html":{},"miscellaneous/variables.html":{}}}],["data).topromise",{"_index":432,"title":{},"body":{"injectables/AreasService.html":{}}}],["databasepool",{"_index":58,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["date(date.now",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["date.now",{"_index":79,"title":{},"body":{"injectables/AboutService.html":{}}}],["db",{"_index":668,"title":{},"body":{"controllers/OauthController.html":{},"dependencies.html":{}}}],["decode",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"controllers/AboutController.html":{},"controllers/ActionsController.html":{},"controllers/AppController.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["default",{"_index":178,"title":{},"body":{"injectables/ActionsService.html":{},"miscellaneous/variables.html":{}}}],["defaultfieldsfromwhere",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["delete",{"_index":348,"title":{},"body":{"controllers/AreasController.html":{},"controllers/UserController.html":{}}}],["delete('')@useguards(undefined",{"_index":944,"title":{},"body":{"controllers/UserController.html":{}}}],["deletearea",{"_index":334,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{}}}],["deletearea(@user",{"_index":370,"title":{},"body":{"controllers/AreasController.html":{}}}],["deletearea(id",{"_index":411,"title":{},"body":{"injectables/AreasService.html":{}}}],["deletearea(user",{"_index":340,"title":{},"body":{"controllers/AreasController.html":{}}}],["deleted",{"_index":237,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{}}}],["deleteuser",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(userid",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteusr",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteusr(@user",{"_index":972,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteusr(usr",{"_index":943,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployment",{"_index":174,"title":{},"body":{"injectables/ActionsService.html":{}}}],["deployment_events",{"_index":175,"title":{},"body":{"injectables/ActionsService.html":{}}}],["description",{"_index":93,"title":{},"body":{"injectables/AboutService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"injectables/UserAreas.html":{},"index.html":{},"properties.html":{}}}],["detect",{"_index":239,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserAreas.html":{}}}],["development",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"classes/EnvironmentVariables.html":{},"classes/UserAuth.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["dico",{"_index":911,"title":{},"body":{"injectables/UserAreas.html":{}}}],["dico[\"description",{"_index":919,"title":{},"body":{"injectables/UserAreas.html":{}}}],["dico[\"name",{"_index":918,"title":{},"body":{"injectables/UserAreas.html":{}}}],["dico[\"service_id",{"_index":915,"title":{},"body":{"injectables/UserAreas.html":{}}}],["dico_id",{"_index":452,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{}}}],["dico_name",{"_index":910,"title":{},"body":{"injectables/UserAreas.html":{}}}],["dicodto",{"_index":329,"title":{"classes/DicoDto.html":{}},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"coverage.html":{}}}],["discord",{"_index":770,"title":{},"body":{"controllers/ReactionsController.html":{},"dependencies.html":{}}}],["discordmsgreactiondto",{"_index":574,"title":{"classes/DiscordMsgReactionDto.html":{}},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/ReactionsController.html":{},"classes/SmsReactionDto.html":{},"coverage.html":{}}}],["documentation",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":1037,"title":{},"body":{"injectables/UserService.html":{}}}],["domain",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["duration",{"_index":671,"title":{},"body":{"classes/OauthCreationDto.html":{},"injectables/OauthService.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["e2e",{"_index":1200,"title":{},"body":{"index.html":{}}}],["ea353c779dbd2fa1d3d4372b194a6f95",{"_index":786,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["efficient",{"_index":1181,"title":{},"body":{"index.html":{}}}],["elem",{"_index":209,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/UserAreas.html":{}}}],["elem.id",{"_index":220,"title":{},"body":{"injectables/ActionsService.html":{}}}],["elem.id_react",{"_index":428,"title":{},"body":{"injectables/AreasService.html":{}}}],["elem.split('=')[1",{"_index":737,"title":{},"body":{"injectables/OauthService.html":{}}}],["elem[\"dico_id",{"_index":914,"title":{},"body":{"injectables/UserAreas.html":{}}}],["elem_id",{"_index":905,"title":{},"body":{"injectables/UserAreas.html":{}}}],["elem_name",{"_index":909,"title":{},"body":{"injectables/UserAreas.html":{}}}],["email",{"_index":678,"title":{},"body":{"classes/OauthCreationDto.html":{},"controllers/ReactionsController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["embed",{"_index":576,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/ReactionsController.html":{},"classes/SmsReactionDto.html":{}}}],["embed.addfield(body.fieldname",{"_index":811,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["embed.setdescription(body.message",{"_index":813,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["embed.setfooter('sent",{"_index":808,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["embed.settitle(body.title",{"_index":810,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["enableimplicitconversion",{"_index":625,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["enum",{"_index":617,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["enumerations",{"_index":1161,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvariables",{"_index":598,"title":{"classes/EnvironmentVariables.html":{}},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["err",{"_index":1048,"title":{},"body":{"injectables/UserService.html":{}}}],["error",{"_index":202,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["error(errors.tostring",{"_index":630,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["errors",{"_index":626,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["errors.length",{"_index":629,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["event",{"_index":163,"title":{},"body":{"injectables/ActionsService.html":{}}}],["executioncontext",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["expiresin",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{}}}],["exports",{"_index":866,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{},"dependencies.html":{}}}],["extends",{"_index":560,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["false",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/EnvironmentVariables.html":{},"classes/UserAuth.html":{}}}],["field",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["fielddescription",{"_index":577,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["fieldname",{"_index":578,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["fields",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{}}}],["format",{"_index":916,"title":{},"body":{"injectables/UserAreas.html":{}}}],["found",{"_index":254,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1179,"title":{},"body":{"index.html":{}}}],["fs",{"_index":902,"title":{},"body":{"injectables/UserAreas.html":{}}}],["full_name",{"_index":833,"title":{},"body":{"classes/Repository.html":{}}}],["full_name:string",{"_index":636,"title":{},"body":{"classes/GithubDto.html":{},"classes/Repository.html":{}}}],["function",{"_index":620,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["functions",{"_index":1164,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated_at",{"_index":672,"title":{},"body":{"classes/OauthCreationDto.html":{},"injectables/OauthService.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["get('/get",{"_index":379,"title":{},"body":{"controllers/AreasController.html":{}}}],["get('/get')@useguards(undefined",{"_index":344,"title":{},"body":{"controllers/AreasController.html":{}}}],["get('actions",{"_index":856,"title":{},"body":{"controllers/ServicesController.html":{}}}],["get('actions')@useguards(undefined",{"_index":842,"title":{},"body":{"controllers/ServicesController.html":{}}}],["get('areas",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["get('areas')@useguards(undefined",{"_index":947,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile",{"_index":964,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile')@useguards(undefined",{"_index":950,"title":{},"body":{"controllers/UserController.html":{}}}],["get('reactions",{"_index":859,"title":{},"body":{"controllers/ServicesController.html":{}}}],["get('reactions')@useguards(undefined",{"_index":846,"title":{},"body":{"controllers/ServicesController.html":{}}}],["get()@useguards(undefined",{"_index":849,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getactionorreactioninfos",{"_index":887,"title":{},"body":{"injectables/UserAreas.html":{}}}],["getactionorreactioninfos(area",{"_index":893,"title":{},"body":{"injectables/UserAreas.html":{}}}],["getactions",{"_index":1090,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["getactionsbyserviceid",{"_index":838,"title":{},"body":{"controllers/ServicesController.html":{},"injectables/ServicesService.html":{}}}],["getactionsbyserviceid(@user",{"_index":857,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getactionsbyserviceid(id",{"_index":870,"title":{},"body":{"injectables/ServicesService.html":{}}}],["getactionsbyserviceid(usr",{"_index":841,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getareabyuser",{"_index":399,"title":{},"body":{"injectables/AreasService.html":{}}}],["getareabyuser(usrid",{"_index":413,"title":{},"body":{"injectables/AreasService.html":{}}}],["getareas",{"_index":888,"title":{},"body":{"injectables/UserAreas.html":{},"controllers/UserController.html":{}}}],["getareas(@user",{"_index":969,"title":{},"body":{"controllers/UserController.html":{}}}],["getareas(userid",{"_index":897,"title":{},"body":{"injectables/UserAreas.html":{}}}],["getareas(usr",{"_index":946,"title":{},"body":{"controllers/UserController.html":{}}}],["getareasbyuser",{"_index":335,"title":{},"body":{"controllers/AreasController.html":{}}}],["getareasbyuser(@user",{"_index":380,"title":{},"body":{"controllers/AreasController.html":{}}}],["getareasbyuser(user",{"_index":343,"title":{},"body":{"controllers/AreasController.html":{}}}],["getauthlink",{"_index":650,"title":{},"body":{"controllers/OauthController.html":{}}}],["getauthlink(@body",{"_index":661,"title":{},"body":{"controllers/OauthController.html":{}}}],["getauthlink(body",{"_index":652,"title":{},"body":{"controllers/OauthController.html":{}}}],["gethello",{"_index":257,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlink",{"_index":704,"title":{},"body":{"injectables/OauthService.html":{}}}],["getlink(servicename",{"_index":709,"title":{},"body":{"injectables/OauthService.html":{}}}],["getreactionsbyserviceid",{"_index":839,"title":{},"body":{"controllers/ServicesController.html":{},"injectables/ServicesService.html":{}}}],["getreactionsbyserviceid(@user",{"_index":860,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getreactionsbyserviceid(id",{"_index":872,"title":{},"body":{"injectables/ServicesService.html":{}}}],["getreactionsbyserviceid(usr",{"_index":845,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getservice",{"_index":705,"title":{},"body":{"injectables/OauthService.html":{}}}],["getservice(servicename",{"_index":711,"title":{},"body":{"injectables/OauthService.html":{}}}],["getservices",{"_index":840,"title":{},"body":{"controllers/ServicesController.html":{},"injectables/ServicesService.html":{}}}],["getservices(@user",{"_index":854,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getservices(usr",{"_index":848,"title":{},"body":{"controllers/ServicesController.html":{}}}],["getting",{"_index":1175,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":651,"title":{},"body":{"controllers/OauthController.html":{}}}],["gettoken(@user",{"_index":663,"title":{},"body":{"controllers/OauthController.html":{}}}],["gettoken(body",{"_index":726,"title":{},"body":{"injectables/OauthService.html":{}}}],["gettoken(user",{"_index":654,"title":{},"body":{"controllers/OauthController.html":{}}}],["gettokenforservice",{"_index":706,"title":{},"body":{"injectables/OauthService.html":{}}}],["gettokenforservice(userid",{"_index":713,"title":{},"body":{"injectables/OauthService.html":{}}}],["gettokenlink(body",{"_index":723,"title":{},"body":{"injectables/OauthService.html":{}}}],["getuser",{"_index":994,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuser(cookie",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getuser(request.cookies",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuser(usr",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserfromid",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserfromid(userid",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserprofile",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserprofile(@user",{"_index":965,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserprofile(usr",{"_index":949,"title":{},"body":{"controllers/UserController.html":{}}}],["githubdto",{"_index":631,"title":{"classes/GithubDto.html":{}},"body":{"classes/GithubDto.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["gitlab",{"_index":245,"title":{},"body":{"injectables/ActionsService.html":{}}}],["grow",{"_index":1207,"title":{},"body":{"index.html":{}}}],["headers",{"_index":192,"title":{},"body":{"injectables/ActionsService.html":{}}}],["heart",{"_index":809,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["hello",{"_index":310,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1216,"title":{},"body":{"index.html":{}}}],["hook",{"_index":804,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["hook.send(body.message",{"_index":815,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["hook.send(embed",{"_index":814,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["hook.setusername(body.hookusername",{"_index":806,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["hookcreationdto",{"_index":150,"title":{"classes/HookCreationDto.html":{}},"body":{"injectables/ActionsService.html":{},"classes/HookCreationDto.html":{},"coverage.html":{}}}],["hookusername",{"_index":579,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["host",{"_index":76,"title":{},"body":{"injectables/AboutService.html":{}}}],["html_url",{"_index":834,"title":{},"body":{"classes/Repository.html":{}}}],["html_url:string",{"_index":637,"title":{},"body":{"classes/GithubDto.html":{},"classes/Repository.html":{}}}],["http://pantharea.fun:8080/webhooks/${params.service",{"_index":184,"title":{},"body":{"injectables/ActionsService.html":{}}}],["httpexception",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["httpmodule",{"_index":122,"title":{},"body":{"modules/ActionsModule.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebhooksModule.html":{}}}],["httponly",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["https://gitlab.com/api/v4/projects/${params.project_id}/hooks?url=${url",{"_index":191,"title":{},"body":{"injectables/ActionsService.html":{}}}],["https://nestjs.com",{"_index":1223,"title":{},"body":{"index.html":{}}}],["httpserver",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["httpservice",{"_index":123,"title":{},"body":{"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"modules/ReactionsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["httpstatus",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["hub",{"_index":1072,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["ici",{"_index":468,"title":{},"body":{"injectables/AreasService.html":{},"controllers/ReactionsController.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"classes/OauthCreationDto.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{}}}],["id_act",{"_index":423,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{}}}],["id_react",{"_index":472,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{}}}],["identifier",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["idservice",{"_index":875,"title":{},"body":{"injectables/ServicesService.html":{}}}],["ignoreexpiration",{"_index":566,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["image",{"_index":680,"title":{},"body":{"classes/OauthCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{}}}],["imports",{"_index":128,"title":{},"body":{"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{}}}],["informations",{"_index":913,"title":{},"body":{"injectables/UserAreas.html":{}}}],["inject",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AppService.html":{},"injectables/AreasService.html":{},"injectables/AuthStrategy.html":{},"injectables/OauthService.html":{},"injectables/ReactionsService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"injectables/WebhooksService.html":{}},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AppService.html":{},"injectables/AreasService.html":{},"injectables/AuthStrategy.html":{},"injectables/OauthService.html":{},"injectables/ReactionsService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"injectables/WebhooksService.html":{},"coverage.html":{}}}],["injectables",{"_index":54,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AppService.html":{},"injectables/AreasService.html":{},"injectables/AuthStrategy.html":{},"injectables/OauthService.html":{},"injectables/ReactionsService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"injectables/WebhooksService.html":{},"overview.html":{}}}],["injectpool",{"_index":66,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["inner",{"_index":221,"title":{},"body":{"injectables/ActionsService.html":{}}}],["installation",{"_index":1188,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1190,"title":{},"body":{"index.html":{}}}],["interceptor",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["ip",{"_index":64,"title":{},"body":{"injectables/AboutService.html":{}}}],["isboolean",{"_index":583,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["isenum",{"_index":612,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(backendenvironment",{"_index":605,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isglobal",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["isjson",{"_index":326,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/HookCreationDto.html":{}}}],["isnotempty",{"_index":613,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnotempty()@isstring",{"_index":609,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnumber",{"_index":327,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HookCreationDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{}}}],["isoptional()@isstring",{"_index":585,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["isstring",{"_index":320,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{}}}],["isstring()@isoptional",{"_index":692,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["issues",{"_index":172,"title":{},"body":{"injectables/ActionsService.html":{}}}],["issues_events",{"_index":173,"title":{},"body":{"injectables/ActionsService.html":{}}}],["isurl",{"_index":593,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["je",{"_index":466,"title":{},"body":{"injectables/AreasService.html":{}}}],["join",{"_index":222,"title":{},"body":{"injectables/ActionsService.html":{},"index.html":{}}}],["json.parse(elem.params",{"_index":211,"title":{},"body":{"injectables/ActionsService.html":{}}}],["json.parse(elem[\"params",{"_index":920,"title":{},"body":{"injectables/UserAreas.html":{}}}],["json.parse(reaction.rows[0].params",{"_index":476,"title":{},"body":{"injectables/AreasService.html":{}}}],["json.parse(reaction.rows[0].params.tostring",{"_index":430,"title":{},"body":{"injectables/AreasService.html":{}}}],["json.stringify",{"_index":1076,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["json.stringify(body.action_params",{"_index":454,"title":{},"body":{"injectables/AreasService.html":{}}}],["json.stringify(body.reaction_params",{"_index":463,"title":{},"body":{"injectables/AreasService.html":{}}}],["json.stringify(key",{"_index":441,"title":{},"body":{"injectables/AreasService.html":{}}}],["json.stringify(test",{"_index":219,"title":{},"body":{"injectables/ActionsService.html":{}}}],["json.stringify(tmp",{"_index":235,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{}}}],["json.stringify({action_type",{"_index":236,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/WebhooksController.html":{}}}],["json.stringify({url:body.repository.html_url,secret:req.headers[\"x",{"_index":1071,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["jwt",{"_index":558,"title":{},"body":{"injectables/AuthStrategy.html":{},"dependencies.html":{}}}],["jwt_secret",{"_index":603,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwtfromrequest",{"_index":563,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["jwtmodule",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["kamil",{"_index":1220,"title":{},"body":{"index.html":{}}}],["license",{"_index":1226,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1204,"title":{},"body":{"index.html":{}}}],["literal",{"_index":140,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":618,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["localhost",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["logged",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["loginuser",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["loginuser(body",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["logo",{"_index":686,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"injectables/ServicesService.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{}}}],["mailjet",{"_index":783,"title":{},"body":{"controllers/ReactionsController.html":{},"dependencies.html":{}}}],["mailreactiondto",{"_index":594,"title":{"classes/MailReactionDto.html":{}},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/ReactionsController.html":{},"classes/SmsReactionDto.html":{},"coverage.html":{}}}],["map",{"_index":734,"title":{},"body":{"injectables/OauthService.html":{}}}],["map.get('access_token",{"_index":738,"title":{},"body":{"injectables/OauthService.html":{}}}],["map.set(elem.split('=')[0",{"_index":736,"title":{},"body":{"injectables/OauthService.html":{}}}],["match",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":40,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merge",{"_index":169,"title":{},"body":{"injectables/ActionsService.html":{}}}],["merge_requests_events",{"_index":171,"title":{},"body":{"injectables/ActionsService.html":{}}}],["message",{"_index":580,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["messagebuilder",{"_index":769,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["messages",{"_index":790,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["metadata",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":190,"title":{},"body":{"injectables/ActionsService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["migrate",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["miscellaneous",{"_index":1160,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["mit",{"_index":1203,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1195,"title":{},"body":{"index.html":{}}}],["model",{"_index":912,"title":{},"body":{"injectables/UserAreas.html":{}}}],["module",{"_index":41,"title":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{}},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["myśliwiec",{"_index":1221,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nb",{"_index":240,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserAreas.html":{}}}],["nest",{"_index":1185,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1225,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":67,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"modules/AppModule.html":{},"injectables/AreasService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":124,"title":{},"body":{"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"modules/ReactionsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebhooksModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserAuth.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserAuth.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":352,"title":{},"body":{"controllers/AreasController.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":161,"title":{},"body":{"injectables/ActionsService.html":{},"modules/AppModule.html":{},"injectables/WebhooksService.html":{},"dependencies.html":{}}}],["new",{"_index":385,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"classes/EnvironmentVariables.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newparams",{"_index":234,"title":{},"body":{"injectables/ActionsService.html":{}}}],["newusername",{"_index":817,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["node",{"_index":772,"title":{},"body":{"controllers/ReactionsController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":1178,"title":{},"body":{"index.html":{}}}],["none",{"_index":744,"title":{},"body":{"injectables/OauthService.html":{}}}],["notfoundexception",{"_index":717,"title":{},"body":{"injectables/OauthService.html":{}}}],["notfoundexception('no",{"_index":749,"title":{},"body":{"injectables/OauthService.html":{}}}],["now",{"_index":745,"title":{},"body":{"injectables/OauthService.html":{}}}],["npm",{"_index":1189,"title":{},"body":{"index.html":{}}}],["null",{"_index":439,"title":{},"body":{"injectables/AreasService.html":{},"injectables/AuthStrategy.html":{},"controllers/ReactionsController.html":{}}}],["number",{"_index":144,"title":{},"body":{"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"injectables/UserAreas.html":{}}}],["oauth",{"_index":649,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["oauth.controller",{"_index":702,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.dto",{"_index":658,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["oauth.service",{"_index":659,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth/oauth.module",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["oauthcontroller",{"_index":647,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthcreationdto",{"_index":669,"title":{"classes/OauthCreationDto.html":{}},"body":{"classes/OauthCreationDto.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"coverage.html":{}}}],["oauthdictionnarydto",{"_index":682,"title":{"classes/OauthDictionnaryDto.html":{}},"body":{"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"classes/TokenCreationDto.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":269,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":120,"title":{"injectables/OauthService.html":{}},"body":{"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"modules/AreasModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"coverage.html":{},"overview.html":{}}}],["object.assign(this",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["object.keys(body.action_params).foreach(key",{"_index":436,"title":{},"body":{"injectables/AreasService.html":{}}}],["object.keys(body.reaction_params).foreach(key",{"_index":442,"title":{},"body":{"injectables/AreasService.html":{}}}],["open",{"_index":1205,"title":{},"body":{"index.html":{}}}],["optional",{"_index":21,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{},"miscellaneous/functions.html":{}}}],["os",{"_index":355,"title":{},"body":{"controllers/AreasController.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"overview.html":{}}}],["output",{"_index":917,"title":{},"body":{"injectables/UserAreas.html":{}}}],["overview",{"_index":1230,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1119,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pantharea",{"_index":792,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["pantharea.fun",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["param",{"_index":146,"title":{},"body":{"injectables/ActionsService.html":{}}}],["param.id",{"_index":238,"title":{},"body":{"injectables/ActionsService.html":{}}}],["param.nb",{"_index":241,"title":{},"body":{"injectables/ActionsService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":142,"title":{},"body":{"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"injectables/OauthService.html":{},"injectables/UserAreas.html":{},"controllers/WebhooksController.html":{}}}],["params.foreach((elem",{"_index":735,"title":{},"body":{"injectables/OauthService.html":{}}}],["params.previous_value",{"_index":213,"title":{},"body":{"injectables/ActionsService.html":{}}}],["params.project_id",{"_index":247,"title":{},"body":{"injectables/ActionsService.html":{}}}],["params.project_id.tostring()},\"url",{"_index":187,"title":{},"body":{"injectables/ActionsService.html":{}}}],["params.scope",{"_index":249,"title":{},"body":{"injectables/ActionsService.html":{}}}],["params.service",{"_index":182,"title":{},"body":{"injectables/ActionsService.html":{}}}],["parser",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["passe",{"_index":467,"title":{},"body":{"injectables/AreasService.html":{},"controllers/ReactionsController.html":{}}}],["passport",{"_index":557,"title":{},"body":{"injectables/AuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":559,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":561,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["password",{"_index":679,"title":{},"body":{"classes/OauthCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["payload",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["pg",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["plaintoclass",{"_index":615,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["plaintoclass(environmentvariables",{"_index":624,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["please",{"_index":1214,"title":{},"body":{"index.html":{}}}],["pool",{"_index":61,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["post",{"_index":113,"title":{},"body":{"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"controllers/WebhooksController.html":{}}}],["post(\"send",{"_index":787,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["post('')@useguards(undefined",{"_index":656,"title":{},"body":{"controllers/OauthController.html":{}}}],["post('/create",{"_index":361,"title":{},"body":{"controllers/AreasController.html":{}}}],["post('/create')@useguards(undefined",{"_index":337,"title":{},"body":{"controllers/AreasController.html":{}}}],["post('/delete",{"_index":369,"title":{},"body":{"controllers/AreasController.html":{}}}],["post('/delete')@useguards(undefined",{"_index":341,"title":{},"body":{"controllers/AreasController.html":{}}}],["post('/gitlab",{"_index":110,"title":{},"body":{"controllers/ActionsController.html":{}}}],["post('/mailjet",{"_index":763,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["post('addoauth",{"_index":957,"title":{},"body":{"controllers/UserController.html":{}}}],["post('addoauth')@useguards(undefined",{"_index":938,"title":{},"body":{"controllers/UserController.html":{}}}],["post('area",{"_index":757,"title":{},"body":{"controllers/ReactionsController.html":{},"controllers/WebhooksController.html":{}}}],["post('discord",{"_index":760,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["post('github",{"_index":1061,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["post('gitlab",{"_index":1064,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["post('login",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["post('register",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["post('sms",{"_index":766,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["post('username",{"_index":960,"title":{},"body":{"controllers/UserController.html":{}}}],["post('username')@useguards(undefined",{"_index":941,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres://root:root@postgres/root",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AboutController.html":{},"controllers/ActionsController.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"controllers/UserController.html":{},"controllers/WebhooksController.html":{}}}],["private",{"_index":34,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["process.env.jwt_secret",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{}}}],["process.env.node_env",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["process.env.twilio_auth_token",{"_index":778,"title":{},"body":{"controllers/ReactionsController.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":619,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["progressive",{"_index":1177,"title":{},"body":{"index.html":{}}}],["project",{"_index":1206,"title":{},"body":{"index.html":{}}}],["project_id",{"_index":639,"title":{},"body":{"classes/HookCreationDto.html":{},"controllers/WebhooksController.html":{}}}],["promise",{"_index":555,"title":{},"body":{"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["properties",{"_index":315,"title":{"properties.html":{}},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/Repository.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{},"properties.html":{}}}],["props",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":51,"title":{},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{}}}],["push",{"_index":167,"title":{},"body":{"injectables/ActionsService.html":{}}}],["push_events",{"_index":168,"title":{},"body":{"injectables/ActionsService.html":{}}}],["qactions",{"_index":81,"title":{},"body":{"injectables/AboutService.html":{}}}],["qactions.rows",{"_index":90,"title":{},"body":{"injectables/AboutService.html":{}}}],["qallfieldsfromwhere",{"_index":26,"title":{},"body":{"controllers/AboutController.html":{},"injectables/UserAreas.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["qallfieldsfromwhere(props",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["qdeletefieldsfromwhere",{"_index":417,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["qdeletefieldsfromwhere(props",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["qfirstfieldsfromwhere",{"_index":416,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["qfirstfieldsfromwhere(props",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["qreactions",{"_index":85,"title":{},"body":{"injectables/AboutService.html":{}}}],["qreactions.rows",{"_index":97,"title":{},"body":{"injectables/AboutService.html":{}}}],["queries/queries",{"_index":27,"title":{},"body":{"controllers/AboutController.html":{}}}],["query",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{}}}],["query_code",{"_index":687,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["query_token",{"_index":688,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["queryresultrow",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["r",{"_index":372,"title":{},"body":{"controllers/AreasController.html":{}}}],["reaction",{"_index":96,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"miscellaneous/enumerations.html":{}}}],["reaction.description",{"_index":99,"title":{},"body":{"injectables/AboutService.html":{}}}],["reaction.id",{"_index":225,"title":{},"body":{"injectables/ActionsService.html":{}}}],["reaction.name",{"_index":98,"title":{},"body":{"injectables/AboutService.html":{}}}],["reaction.params).topromise",{"_index":230,"title":{},"body":{"injectables/ActionsService.html":{}}}],["reaction.rows[0].id",{"_index":470,"title":{},"body":{"injectables/AreasService.html":{}}}],["reaction_dico",{"_index":445,"title":{},"body":{"injectables/AreasService.html":{}}}],["reaction_dico[\"service_id",{"_index":449,"title":{},"body":{"injectables/AreasService.html":{}}}],["reaction_id",{"_index":318,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{}}}],["reaction_params",{"_index":319,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{}}}],["reaction_route",{"_index":330,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{}}}],["reaction_route,dico_id",{"_index":462,"title":{},"body":{"injectables/AreasService.html":{}}}],["reaction_service",{"_index":448,"title":{},"body":{"injectables/AreasService.html":{}}}],["reaction_service[\"name",{"_index":464,"title":{},"body":{"injectables/AreasService.html":{}}}],["reactiondiscord",{"_index":753,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactiondiscord(@body",{"_index":803,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactiondiscord(body",{"_index":759,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionmail",{"_index":754,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionmail(@body",{"_index":781,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionmail(config",{"_index":762,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactions",{"_index":104,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/ReactionsController.html":{},"injectables/ServicesService.html":{}}}],["reactions.controller",{"_index":831,"title":{},"body":{"modules/ReactionsModule.html":{}}}],["reactions.dto",{"_index":774,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactions.rows",{"_index":227,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/ServicesService.html":{}}}],["reactions/reactions.module",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["reactionscontroller",{"_index":750,"title":{"controllers/ReactionsController.html":{}},"body":{"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"coverage.html":{}}}],["reactionsmodule",{"_index":270,"title":{"modules/ReactionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["reactionsms",{"_index":755,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionsms(@body",{"_index":820,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionsms(body",{"_index":765,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["reactionsservice",{"_index":718,"title":{"injectables/ReactionsService.html":{}},"body":{"injectables/OauthService.html":{},"injectables/ReactionsService.html":{},"coverage.html":{}}}],["reactionstab",{"_index":88,"title":{},"body":{"injectables/AboutService.html":{}}}],["reactionstab.push(topush",{"_index":100,"title":{},"body":{"injectables/AboutService.html":{}}}],["read",{"_index":1215,"title":{},"body":{"index.html":{}}}],["readictionnary",{"_index":86,"title":{},"body":{"injectables/AboutService.html":{},"injectables/AreasService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{}}}],["readonly",{"_index":35,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"classes/GithubDto.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["recipient",{"_index":595,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["record",{"_index":622,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["redirect_uri",{"_index":689,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["reflect",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["refresh_token",{"_index":673,"title":{},"body":{"classes/OauthCreationDto.html":{},"injectables/OauthService.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["registered",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OauthService.html":{},"classes/UserAuth.html":{}}}],["registeruser",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registeruser(@body",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["registeruser(body",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(usr",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":633,"title":{"classes/Repository.html":{}},"body":{"classes/GithubDto.html":{},"classes/Repository.html":{},"coverage.html":{},"index.html":{}}}],["req",{"_index":22,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AuthStrategy.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"controllers/WebhooksController.html":{}}}],["req.cookies",{"_index":564,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["req.cookies['access_token",{"_index":565,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["request",{"_index":170,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/ReactionsController.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":784,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["require('discord",{"_index":775,"title":{},"body":{"controllers/ReactionsController.html":{},"miscellaneous/variables.html":{}}}],["require('dotenv').config",{"_index":768,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["require('twilio')(process.env.twilio_account_sid",{"_index":777,"title":{},"body":{"controllers/ReactionsController.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["res",{"_index":14,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"controllers/AuthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["res({passthrough",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["res.cookie('access_token",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["res.data",{"_index":730,"title":{},"body":{"injectables/OauthService.html":{}}}],["res.data.current.temp_c",{"_index":214,"title":{},"body":{"injectables/ActionsService.html":{}}}],["res.push",{"_index":876,"title":{},"body":{"injectables/ServicesService.html":{}}}],["res.push(elem",{"_index":926,"title":{},"body":{"injectables/UserAreas.html":{}}}],["res.rowcount",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["res.rows.length",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["res.rows[0",{"_index":720,"title":{},"body":{"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["res.rows[0].password",{"_index":1035,"title":{},"body":{"injectables/UserService.html":{}}}],["res.server.services.push",{"_index":101,"title":{},"body":{"injectables/AboutService.html":{}}}],["res.status(200).json(areas",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).json(await",{"_index":387,"title":{},"body":{"controllers/AreasController.html":{}}}],["res.status(200).json(status",{"_index":975,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).json(user",{"_index":967,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).send(\"area",{"_index":366,"title":{},"body":{"controllers/AreasController.html":{}}}],["res.status(200).send(await",{"_index":37,"title":{},"body":{"controllers/AboutController.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"overview.html":{}}}],["respond",{"_index":12,"title":{},"body":{"controllers/AboutController.html":{}}}],["respond(@req",{"_index":36,"title":{},"body":{"controllers/AboutController.html":{}}}],["respond(req",{"_index":13,"title":{},"body":{"controllers/AboutController.html":{}}}],["response",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{}}}],["result.body",{"_index":800,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["results",{"_index":39,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["ret.rows[0",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["return",{"_index":105,"title":{},"body":{"injectables/AboutService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AreasService.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/EnvironmentVariables.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":455,"title":{},"body":{"injectables/AreasService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AboutController.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WebhooksController.html":{},"injectables/WebhooksService.html":{}}}],["rimraf",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1192,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["samesite",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["scalable",{"_index":1182,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":248,"title":{},"body":{"injectables/ActionsService.html":{},"classes/HookCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{}}}],["secret",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":567,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["selectfields",{"_index":447,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["selectfieldsfromwhere",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["send({\"message",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["server",{"_index":77,"title":{},"body":{"injectables/AboutService.html":{},"index.html":{}}}],["service",{"_index":74,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"classes/HookCreationDto.html":{},"controllers/OauthController.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{}}}],["service.id",{"_index":84,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ServicesService.html":{}}}],["service.logo",{"_index":877,"title":{},"body":{"injectables/ServicesService.html":{}}}],["service.name",{"_index":102,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ServicesService.html":{}}}],["service.query_code}?client_id=${service.client_id}&redirect_uri=${service.redirect_uri}&response_type=code&scope=${service.scope",{"_index":722,"title":{},"body":{"injectables/OauthService.html":{}}}],["service.query_token}?client_id=${service.client_id}&client_secret=${service.client_secret}&redirect_uri=${service.redirect_uri}&code=${body.code}&grant_type=authorization_code",{"_index":725,"title":{},"body":{"injectables/OauthService.html":{}}}],["service:string",{"_index":242,"title":{},"body":{"injectables/ActionsService.html":{}}}],["service[\"logo",{"_index":922,"title":{},"body":{"injectables/UserAreas.html":{}}}],["service[\"name",{"_index":921,"title":{},"body":{"injectables/UserAreas.html":{}}}],["service_id",{"_index":83,"title":{},"body":{"injectables/AboutService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{}}}],["servicename",{"_index":410,"title":{},"body":{"injectables/AreasService.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"classes/TokenCreationDto.html":{}}}],["services",{"_index":71,"title":{},"body":{"injectables/AboutService.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{}}}],["services.controller",{"_index":867,"title":{},"body":{"modules/ServicesModule.html":{}}}],["services.rows",{"_index":80,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ServicesService.html":{}}}],["services.service",{"_index":851,"title":{},"body":{"controllers/ServicesController.html":{},"modules/ServicesModule.html":{}}}],["services/services.controller",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["services/services.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["services/services.service",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["servicescontroller",{"_index":276,"title":{"controllers/ServicesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"coverage.html":{}}}],["servicesmodule",{"_index":271,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["servicesservice",{"_index":274,"title":{"injectables/ServicesService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":218,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["side",{"_index":1183,"title":{},"body":{"index.html":{}}}],["sign",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["signature",{"_index":1073,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["signed_payload",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["signoptions",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{}}}],["skipmissingproperties",{"_index":628,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["slonik",{"_index":68,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"modules/AppModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["slonikmodule",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["slonikmodule.forroot",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["smee",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["smsreactiondto",{"_index":597,"title":{"classes/SmsReactionDto.html":{}},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/ReactionsController.html":{},"classes/SmsReactionDto.html":{},"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AboutController.html":{},"modules/AboutModule.html":{},"injectables/AboutService.html":{},"controllers/ActionsController.html":{},"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"injectables/ReactionsService.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"index.html":{}}}],["sponsors",{"_index":1209,"title":{},"body":{"index.html":{}}}],["sql",{"_index":69,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["sql`update",{"_index":1044,"title":{},"body":{"injectables/UserService.html":{}}}],["src/.../config.ts",{"_index":1163,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queries.ts",{"_index":1162,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../reactions.controller.ts",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/about/about.controller.ts",{"_index":6,"title":{},"body":{"controllers/AboutController.html":{},"coverage.html":{}}}],["src/about/about.controller.ts:12",{"_index":18,"title":{},"body":{"controllers/AboutController.html":{}}}],["src/about/about.module.ts",{"_index":50,"title":{},"body":{"modules/AboutModule.html":{}}}],["src/about/about.service.ts",{"_index":55,"title":{},"body":{"injectables/AboutService.html":{},"coverage.html":{}}}],["src/about/about.service.ts:12",{"_index":63,"title":{},"body":{"injectables/AboutService.html":{}}}],["src/about/about.service.ts:6",{"_index":59,"title":{},"body":{"injectables/AboutService.html":{}}}],["src/actions/actions.controller.ts",{"_index":107,"title":{},"body":{"controllers/ActionsController.html":{},"coverage.html":{}}}],["src/actions/actions.controller.ts:6",{"_index":111,"title":{},"body":{"controllers/ActionsController.html":{}}}],["src/actions/actions.dto.ts",{"_index":638,"title":{},"body":{"classes/HookCreationDto.html":{},"coverage.html":{}}}],["src/actions/actions.dto.ts:11",{"_index":641,"title":{},"body":{"classes/HookCreationDto.html":{}}}],["src/actions/actions.dto.ts:5",{"_index":640,"title":{},"body":{"classes/HookCreationDto.html":{}}}],["src/actions/actions.dto.ts:8",{"_index":642,"title":{},"body":{"classes/HookCreationDto.html":{}}}],["src/actions/actions.module",{"_index":392,"title":{},"body":{"modules/AreasModule.html":{}}}],["src/actions/actions.module.ts",{"_index":121,"title":{},"body":{"modules/ActionsModule.html":{}}}],["src/actions/actions.service",{"_index":393,"title":{},"body":{"modules/AreasModule.html":{},"injectables/AreasService.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{}}}],["src/actions/actions.service.ts",{"_index":129,"title":{},"body":{"injectables/ActionsService.html":{},"coverage.html":{}}}],["src/actions/actions.service.ts:13",{"_index":135,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/actions/actions.service.ts:21",{"_index":151,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/actions/actions.service.ts:58",{"_index":154,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/actions/actions.service.ts:76",{"_index":153,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/actions/actions.service.ts:86",{"_index":147,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/actions/actions.service.ts:98",{"_index":141,"title":{},"body":{"injectables/ActionsService.html":{}}}],["src/app.controller.ts",{"_index":256,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":258,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":308,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":309,"title":{},"body":{"injectables/AppService.html":{}}}],["src/areas/areas.controller.ts",{"_index":333,"title":{},"body":{"controllers/AreasController.html":{},"coverage.html":{}}}],["src/areas/areas.controller.ts:21",{"_index":338,"title":{},"body":{"controllers/AreasController.html":{}}}],["src/areas/areas.controller.ts:29",{"_index":342,"title":{},"body":{"controllers/AreasController.html":{}}}],["src/areas/areas.controller.ts:39",{"_index":345,"title":{},"body":{"controllers/AreasController.html":{}}}],["src/areas/areas.dto.ts",{"_index":314,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"coverage.html":{}}}],["src/areas/areas.dto.ts:11",{"_index":322,"title":{},"body":{"classes/AreaCreationDto.html":{}}}],["src/areas/areas.dto.ts:14",{"_index":323,"title":{},"body":{"classes/AreaCreationDto.html":{}}}],["src/areas/areas.dto.ts:17",{"_index":324,"title":{},"body":{"classes/AreaCreationDto.html":{}}}],["src/areas/areas.dto.ts:22",{"_index":571,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:25",{"_index":570,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:28",{"_index":568,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:31",{"_index":573,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:34",{"_index":569,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:37",{"_index":572,"title":{},"body":{"classes/DicoDto.html":{}}}],["src/areas/areas.dto.ts:42",{"_index":332,"title":{},"body":{"classes/AreaId.html":{}}}],["src/areas/areas.dto.ts:5",{"_index":325,"title":{},"body":{"classes/AreaCreationDto.html":{}}}],["src/areas/areas.dto.ts:8",{"_index":321,"title":{},"body":{"classes/AreaCreationDto.html":{}}}],["src/areas/areas.module",{"_index":1087,"title":{},"body":{"modules/WebhooksModule.html":{}}}],["src/areas/areas.module.ts",{"_index":391,"title":{},"body":{"modules/AreasModule.html":{}}}],["src/areas/areas.service",{"_index":903,"title":{},"body":{"injectables/UserAreas.html":{},"modules/UserModule.html":{},"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{}}}],["src/areas/areas.service.ts",{"_index":395,"title":{},"body":{"injectables/AreasService.html":{},"coverage.html":{}}}],["src/areas/areas.service.ts:11",{"_index":400,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:19",{"_index":402,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:39",{"_index":404,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:54",{"_index":407,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:81",{"_index":409,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:92",{"_index":412,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/areas/areas.service.ts:96",{"_index":414,"title":{},"body":{"injectables/AreasService.html":{}}}],["src/auth/auth.controller",{"_index":156,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/auth/auth.controller.ts",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:12",{"_index":931,"title":{},"body":{"classes/UserAuth.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":930,"title":{},"body":{"classes/UserAuth.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.strategy.ts",{"_index":551,"title":{},"body":{"injectables/AuthStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.strategy.ts:17",{"_index":554,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["src/auth/auth.strategy.ts:6",{"_index":552,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["src/config.ts",{"_index":599,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/config.ts:14",{"_index":611,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/config.ts:17",{"_index":606,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/config.ts:21",{"_index":610,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/config.ts:25",{"_index":608,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/main.ts",{"_index":1110,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":648,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:18",{"_index":653,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/oauth/oauth.controller.ts:25",{"_index":657,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/oauth/oauth.dto.ts",{"_index":683,"title":{},"body":{"classes/OauthDictionnaryDto.html":{},"classes/TokenCreationDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.dto.ts:12",{"_index":695,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:16",{"_index":693,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:19",{"_index":690,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:22",{"_index":691,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:25",{"_index":696,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:28",{"_index":697,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:33",{"_index":884,"title":{},"body":{"classes/TokenCreationDto.html":{}}}],["src/oauth/oauth.dto.ts:36",{"_index":883,"title":{},"body":{"classes/TokenCreationDto.html":{}}}],["src/oauth/oauth.dto.ts:6",{"_index":698,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.dto.ts:9",{"_index":694,"title":{},"body":{"classes/OauthDictionnaryDto.html":{}}}],["src/oauth/oauth.module.ts",{"_index":701,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/oauth/oauth.service",{"_index":125,"title":{},"body":{"modules/ActionsModule.html":{},"injectables/ActionsService.html":{},"modules/AreasModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{}}}],["src/oauth/oauth.service.ts",{"_index":703,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:16",{"_index":712,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/oauth/oauth.service.ts:22",{"_index":710,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/oauth/oauth.service.ts:47",{"_index":716,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/oauth/oauth.service.ts:59",{"_index":714,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/oauth/oauth.service.ts:9",{"_index":708,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/queries/queries",{"_index":418,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["src/queries/queries.ts",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/reactions/reactions.controller.ts",{"_index":751,"title":{},"body":{"controllers/ReactionsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/reactions/reactions.controller.ts:18",{"_index":764,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["src/reactions/reactions.controller.ts:53",{"_index":761,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["src/reactions/reactions.controller.ts:70",{"_index":758,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["src/reactions/reactions.controller.ts:76",{"_index":767,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["src/reactions/reactions.dto.ts",{"_index":575,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{},"coverage.html":{}}}],["src/reactions/reactions.dto.ts:12",{"_index":645,"title":{},"body":{"classes/MailReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:15",{"_index":643,"title":{},"body":{"classes/MailReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:20",{"_index":591,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:23",{"_index":589,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:26",{"_index":588,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:29",{"_index":584,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:33",{"_index":590,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:37",{"_index":587,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:41",{"_index":586,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:47",{"_index":882,"title":{},"body":{"classes/SmsReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:50",{"_index":881,"title":{},"body":{"classes/SmsReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:6",{"_index":646,"title":{},"body":{"classes/MailReactionDto.html":{}}}],["src/reactions/reactions.dto.ts:9",{"_index":644,"title":{},"body":{"classes/MailReactionDto.html":{}}}],["src/reactions/reactions.module.ts",{"_index":830,"title":{},"body":{"modules/ReactionsModule.html":{}}}],["src/reactions/reactions.service",{"_index":719,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/reactions/reactions.service.ts",{"_index":832,"title":{},"body":{"injectables/ReactionsService.html":{},"coverage.html":{}}}],["src/services/services.controller.ts",{"_index":837,"title":{},"body":{"controllers/ServicesController.html":{},"coverage.html":{}}}],["src/services/services.controller.ts:15",{"_index":850,"title":{},"body":{"controllers/ServicesController.html":{}}}],["src/services/services.controller.ts:21",{"_index":843,"title":{},"body":{"controllers/ServicesController.html":{}}}],["src/services/services.controller.ts:27",{"_index":847,"title":{},"body":{"controllers/ServicesController.html":{}}}],["src/services/services.module.ts",{"_index":865,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/services/services.service.ts",{"_index":868,"title":{},"body":{"injectables/ServicesService.html":{},"coverage.html":{}}}],["src/services/services.service.ts:12",{"_index":874,"title":{},"body":{"injectables/ServicesService.html":{}}}],["src/services/services.service.ts:29",{"_index":871,"title":{},"body":{"injectables/ServicesService.html":{}}}],["src/services/services.service.ts:34",{"_index":873,"title":{},"body":{"injectables/ServicesService.html":{}}}],["src/services/services.service.ts:6",{"_index":869,"title":{},"body":{"injectables/ServicesService.html":{}}}],["src/user/user.areas",{"_index":357,"title":{},"body":{"controllers/AreasController.html":{},"modules/AreasModule.html":{}}}],["src/user/user.areas.ts",{"_index":885,"title":{},"body":{"injectables/UserAreas.html":{},"coverage.html":{}}}],["src/user/user.areas.ts:10",{"_index":890,"title":{},"body":{"injectables/UserAreas.html":{}}}],["src/user/user.areas.ts:17",{"_index":896,"title":{},"body":{"injectables/UserAreas.html":{}}}],["src/user/user.areas.ts:40",{"_index":898,"title":{},"body":{"injectables/UserAreas.html":{}}}],["src/user/user.areas.ts:57",{"_index":892,"title":{},"body":{"injectables/UserAreas.html":{}}}],["src/user/user.controller.ts",{"_index":933,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:18",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:24",{"_index":942,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:30",{"_index":951,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":948,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:44",{"_index":945,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.decorator",{"_index":353,"title":{},"body":{"controllers/AreasController.html":{},"controllers/OauthController.html":{}}}],["src/user/user.decorator.ts",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.dto.ts",{"_index":670,"title":{},"body":{"classes/OauthCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{},"coverage.html":{}}}],["src/user/user.dto.ts:11",{"_index":978,"title":{},"body":{"classes/UserCreationDto.html":{}}}],["src/user/user.dto.ts:14",{"_index":977,"title":{},"body":{"classes/UserCreationDto.html":{}}}],["src/user/user.dto.ts:19",{"_index":982,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.dto.ts:22",{"_index":981,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.dto.ts:25",{"_index":983,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.dto.ts:28",{"_index":984,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.dto.ts:31",{"_index":980,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.dto.ts:36",{"_index":985,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["src/user/user.dto.ts:39",{"_index":986,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["src/user/user.dto.ts:44",{"_index":677,"title":{},"body":{"classes/OauthCreationDto.html":{}}}],["src/user/user.dto.ts:47",{"_index":676,"title":{},"body":{"classes/OauthCreationDto.html":{}}}],["src/user/user.dto.ts:5",{"_index":979,"title":{},"body":{"classes/UserCreationDto.html":{}}}],["src/user/user.dto.ts:50",{"_index":674,"title":{},"body":{"classes/OauthCreationDto.html":{}}}],["src/user/user.dto.ts:53",{"_index":675,"title":{},"body":{"classes/OauthCreationDto.html":{}}}],["src/user/user.dto.ts:58",{"_index":1051,"title":{},"body":{"classes/Username.html":{}}}],["src/user/user.dto.ts:8",{"_index":976,"title":{},"body":{"classes/UserCreationDto.html":{}}}],["src/user/user.module.ts",{"_index":990,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":773,"title":{},"body":{"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{}}}],["src/user/user.service.ts",{"_index":992,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:36",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:52",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:59",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:82",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["src/webhooks/webhooks.controller.ts",{"_index":1053,"title":{},"body":{"controllers/WebhooksController.html":{},"coverage.html":{}}}],["src/webhooks/webhooks.controller.ts:14",{"_index":1062,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["src/webhooks/webhooks.controller.ts:20",{"_index":1065,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["src/webhooks/webhooks.controller.ts:28",{"_index":1059,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["src/webhooks/webhooks.dto.ts",{"_index":632,"title":{},"body":{"classes/GithubDto.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["src/webhooks/webhooks.dto.ts:10",{"_index":635,"title":{},"body":{"classes/GithubDto.html":{}}}],["src/webhooks/webhooks.dto.ts:4",{"_index":835,"title":{},"body":{"classes/Repository.html":{}}}],["src/webhooks/webhooks.dto.ts:5",{"_index":836,"title":{},"body":{"classes/Repository.html":{}}}],["src/webhooks/webhooks.module.ts",{"_index":1086,"title":{},"body":{"modules/WebhooksModule.html":{}}}],["src/webhooks/webhooks.service.ts",{"_index":1089,"title":{},"body":{"injectables/WebhooksService.html":{},"coverage.html":{}}}],["src/webhooks/webhooks.service.ts:12",{"_index":1095,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["src/webhooks/webhooks.service.ts:6",{"_index":1092,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["start",{"_index":1193,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1196,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1197,"title":{},"body":{"index.html":{}}}],["started",{"_index":1176,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1187,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":973,"title":{},"body":{"controllers/UserController.html":{}}}],["stay",{"_index":1217,"title":{},"body":{"index.html":{}}}],["storetoken",{"_index":707,"title":{},"body":{"injectables/OauthService.html":{}}}],["storetoken(token",{"_index":715,"title":{},"body":{"injectables/OauthService.html":{}}}],["strategy",{"_index":556,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["string",{"_index":137,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/Repository.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"miscellaneous/functions.html":{}}}],["strpos(action.params",{"_index":206,"title":{},"body":{"injectables/ActionsService.html":{}}}],["subject",{"_index":596,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"controllers/ReactionsController.html":{},"classes/SmsReactionDto.html":{}}}],["successfully",{"_index":378,"title":{},"body":{"controllers/AreasController.html":{}}}],["super",{"_index":562,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["support",{"_index":1210,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1228,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":244,"title":{},"body":{"injectables/ActionsService.html":{}}}],["switch(action_name",{"_index":165,"title":{},"body":{"injectables/ActionsService.html":{}}}],["table",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":215,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"classes/EnvironmentVariables.html":{},"injectables/OauthService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test.access_token",{"_index":732,"title":{},"body":{"injectables/OauthService.html":{}}}],["test.hasownproperty('access_token",{"_index":731,"title":{},"body":{"injectables/OauthService.html":{}}}],["test.id",{"_index":424,"title":{},"body":{"injectables/AreasService.html":{}}}],["test.previous_value",{"_index":216,"title":{},"body":{"injectables/ActionsService.html":{}}}],["test.split",{"_index":733,"title":{},"body":{"injectables/OauthService.html":{}}}],["test:covsupport",{"_index":1202,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1201,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1199,"title":{},"body":{"index.html":{}}}],["textpart",{"_index":796,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["thanks",{"_index":1208,"title":{},"body":{"index.html":{}}}],["then((result",{"_index":798,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["then(message",{"_index":826,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["this.aboutservice.aboutjson(req.ip",{"_index":38,"title":{},"body":{"controllers/AboutController.html":{}}}],["this.actionservice.updateweather",{"_index":1097,"title":{},"body":{"injectables/WebhooksService.html":{}}}],["this.actionsservice.createaction(body.action_params",{"_index":458,"title":{},"body":{"injectables/AreasService.html":{}}}],["this.appservice.gethello",{"_index":262,"title":{},"body":{"controllers/AppController.html":{}}}],["this.areaservice.callreaction(json.stringify(params",{"_index":929,"title":{},"body":{"injectables/UserAreas.html":{}}}],["this.areasservices.callreaction(params",{"_index":1074,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["this.areasservices.createarea(user.userid",{"_index":364,"title":{},"body":{"controllers/AreasController.html":{}}}],["this.areasservices.deletearea(body.id.tostring",{"_index":371,"title":{},"body":{"controllers/AreasController.html":{}}}],["this.areasservices.getareabyuser(userid",{"_index":388,"title":{},"body":{"controllers/AreasController.html":{}}}],["this.checkbodycreatearea(body",{"_index":444,"title":{},"body":{"injectables/AreasService.html":{}}}],["this.createarea(action.id",{"_index":252,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.createhookgitlab({project_id",{"_index":246,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.createreaction(reaction_service[\"name",{"_index":469,"title":{},"body":{"injectables/AreasService.html":{}}}],["this.createweather(params",{"_index":250,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.getactionorreactioninfos(area",{"_index":924,"title":{},"body":{"injectables/UserAreas.html":{}}}],["this.getactionsbyserviceid(idservice",{"_index":878,"title":{},"body":{"injectables/ServicesService.html":{}}}],["this.getareas(userid",{"_index":927,"title":{},"body":{"injectables/UserAreas.html":{}}}],["this.getreactionsbyserviceid(idservice",{"_index":879,"title":{},"body":{"injectables/ServicesService.html":{}}}],["this.getservice(body.servicename",{"_index":724,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.getservice(servicename",{"_index":721,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.gettokenlink(body",{"_index":728,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.httpservice.get(`http://api.weatherapi.com/v1/current.json?key=bc3eb83b600343afb4e184537220503&q=${params.city}&aqi=no`).topromise",{"_index":212,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.httpservice.post('http://localhost:8080/webhooks/area",{"_index":373,"title":{},"body":{"controllers/AreasController.html":{}}}],["this.httpservice.post('http://pantharea.fun:8080/webhooks/area",{"_index":1045,"title":{},"body":{"injectables/UserService.html":{}}}],["this.httpservice.post(`http://pantharea.fun:8080/reactions/${reaction.reaction_route",{"_index":229,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.httpservice.post(`http://pantharea.fun:8080/reactions/${reaction.rows[0].reaction_route",{"_index":431,"title":{},"body":{"injectables/AreasService.html":{}}}],["this.httpservice.post(`https://gitlab.com/api/v4/projects/${params.project_id}/hooks?url=${url",{"_index":199,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.httpservice.post(uri).topromise",{"_index":729,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.jwtservice.sign({payload",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["this.oauthservice.getlink(body.name",{"_index":662,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.gettoken(body",{"_index":664,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.gettokenforservice(userid",{"_index":181,"title":{},"body":{"injectables/ActionsService.html":{}}}],["this.oauthservice.storetoken(body.token",{"_index":665,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.pool",{"_index":446,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["this.pool.query",{"_index":1043,"title":{},"body":{"injectables/UserService.html":{}}}],["this.pool.query(sql`insert",{"_index":451,"title":{},"body":{"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["this.pool.query(sql`select",{"_index":73,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/ServicesService.html":{},"injectables/UserService.html":{}}}],["this.pool.query(sql`update",{"_index":217,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{}}}],["this.servicesservice.getactionsbyserviceid(body.id",{"_index":858,"title":{},"body":{"controllers/ServicesController.html":{}}}],["this.servicesservice.getreactionsbyserviceid(body.id",{"_index":861,"title":{},"body":{"controllers/ServicesController.html":{}}}],["this.servicesservice.getservices",{"_index":855,"title":{},"body":{"controllers/ServicesController.html":{}}}],["this.userareas.getareas(usr.userid",{"_index":970,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersarea.areanumber(user.userid",{"_index":365,"title":{},"body":{"controllers/AreasController.html":{}}}],["this.userservice.getuser(body",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["this.userservice.registeruser(body",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["this.usersservice.addoauthtousr(usr",{"_index":959,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.changeusername(body.user_id",{"_index":818,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["this.usersservice.changeusername(usr.userid",{"_index":962,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.deleteuser(usr.userid",{"_index":974,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getuserfromid(usr.userid",{"_index":966,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":384,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{},"classes/EnvironmentVariables.html":{},"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["title",{"_index":581,"title":{},"body":{"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["tmp",{"_index":232,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/AreasService.html":{}}}],["tmp.previous_value",{"_index":233,"title":{},"body":{"injectables/ActionsService.html":{}}}],["tmp.user_id",{"_index":477,"title":{},"body":{"injectables/AreasService.html":{}}}],["tok",{"_index":741,"title":{},"body":{"injectables/OauthService.html":{}}}],["tok.rowcount",{"_index":742,"title":{},"body":{"injectables/OauthService.html":{}}}],["token",{"_index":180,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"classes/TokenCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{}}}],["token.token",{"_index":195,"title":{},"body":{"injectables/ActionsService.html":{}}}],["tokencreationdto",{"_index":655,"title":{"classes/TokenCreationDto.html":{}},"body":{"controllers/OauthController.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"classes/TokenCreationDto.html":{},"coverage.html":{}}}],["tokenlist",{"_index":746,"title":{},"body":{"injectables/OauthService.html":{}}}],["tokenlist.rowcount",{"_index":747,"title":{},"body":{"injectables/OauthService.html":{}}}],["tokenlist.rows[0",{"_index":748,"title":{},"body":{"injectables/OauthService.html":{}}}],["topromise",{"_index":200,"title":{},"body":{"injectables/ActionsService.html":{}}}],["topush",{"_index":91,"title":{},"body":{"injectables/AboutService.html":{}}}],["touch",{"_index":1218,"title":{},"body":{"index.html":{}}}],["transformation",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["transformer",{"_index":616,"title":{},"body":{"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/Repository.html":{},"dependencies.html":{}}}],["true",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/EnvironmentVariables.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["try",{"_index":198,"title":{},"body":{"injectables/ActionsService.html":{},"injectables/UserService.html":{}}}],["twilio",{"_index":776,"title":{},"body":{"controllers/ReactionsController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["twilio.messages",{"_index":821,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["twitter",{"_index":1224,"title":{},"body":{"index.html":{}}}],["type",{"_index":60,"title":{},"body":{"injectables/AboutService.html":{},"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/AuthStrategy.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/GithubDto.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"controllers/OauthController.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"injectables/OauthService.html":{},"controllers/ReactionsController.html":{},"classes/Repository.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":634,"title":{},"body":{"classes/GithubDto.html":{}}}],["type(undefined)@isnumber",{"_index":607,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["typealiases",{"_index":1235,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/cookie",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1186,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception(\"password",{"_index":1036,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":382,"title":{},"body":{"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/ReactionsController.html":{}}}],["unit",{"_index":1198,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":65,"title":{},"body":{"injectables/AboutService.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"controllers/ServicesController.html":{},"injectables/ServicesService.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1234,"title":{},"body":{"properties.html":{}}}],["updateweather",{"_index":134,"title":{},"body":{"injectables/ActionsService.html":{}}}],["uri",{"_index":727,"title":{},"body":{"injectables/OauthService.html":{}}}],["url",{"_index":183,"title":{},"body":{"injectables/ActionsService.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/SmsReactionDto.html":{}}}],["url},${event}:true",{"_index":188,"title":{},"body":{"injectables/ActionsService.html":{}}}],["use",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["usefactory",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":346,"title":{},"body":{"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":362,"title":{},"body":{"controllers/AreasController.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":339,"title":{},"body":{"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.areas",{"_index":955,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.controller",{"_index":991,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":952,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":953,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.id.tostring",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["user.service",{"_index":954,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.userid",{"_index":375,"title":{},"body":{"controllers/AreasController.html":{},"controllers/OauthController.html":{}}}],["user.username.tostring",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["user/user.decorator",{"_index":852,"title":{},"body":{"controllers/ServicesController.html":{}}}],["user/user.dto",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["user/user.module",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserAuth.html":{}}}],["user[\"payload\"].userid",{"_index":383,"title":{},"body":{"controllers/AreasController.html":{}}}],["user[\"payload\"]?.userid",{"_index":381,"title":{},"body":{"controllers/AreasController.html":{}}}],["user_id",{"_index":145,"title":{},"body":{"injectables/ActionsService.html":{},"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"injectables/AreasService.html":{},"classes/DicoDto.html":{},"controllers/ReactionsController.html":{},"injectables/UserAreas.html":{},"controllers/WebhooksController.html":{}}}],["userareas",{"_index":356,"title":{"injectables/UserAreas.html":{}},"body":{"controllers/AreasController.html":{},"modules/AreasModule.html":{},"injectables/UserAreas.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userauth",{"_index":155,"title":{"classes/UserAuth.html":{}},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"controllers/ServicesController.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usercontroller",{"_index":932,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreationdto",{"_index":489,"title":{"classes/UserCreationDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/OauthCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"coverage.html":{}}}],["userdto",{"_index":493,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/OauthCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"coverage.html":{}}}],["userid",{"_index":138,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"controllers/AuthController.html":{},"injectables/OauthService.html":{},"injectables/UserAreas.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["userid}).topromise",{"_index":1047,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo",{"_index":354,"title":{},"body":{"controllers/AreasController.html":{}}}],["userlogindto",{"_index":484,"title":{"classes/UserLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/OauthCreationDto.html":{},"classes/UserAuth.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"coverage.html":{}}}],["usermodule",{"_index":272,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":504,"title":{"classes/Username.html":{}},"body":{"controllers/AuthController.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/SmsReactionDto.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"injectables/UserService.html":{},"classes/Username.html":{},"coverage.html":{}}}],["usersarea",{"_index":360,"title":{},"body":{"controllers/AreasController.html":{}}}],["userservice",{"_index":495,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ReactionsController.html":{},"modules/ReactionsModule.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":780,"title":{},"body":{"controllers/ReactionsController.html":{},"controllers/UserController.html":{}}}],["usr",{"_index":844,"title":{},"body":{"controllers/ServicesController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usr.email",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["usr.image",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["usr.password",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["usr.userid",{"_index":1042,"title":{},"body":{"injectables/UserService.html":{}}}],["usr.username",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["usr_id",{"_index":473,"title":{},"body":{"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{}}}],["usrid",{"_index":415,"title":{},"body":{"injectables/AreasService.html":{}}}],["v3.1",{"_index":789,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["validate",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthStrategy.html":{}}}],["validate(data",{"_index":553,"title":{},"body":{"injectables/AuthStrategy.html":{}}}],["validatedconfig",{"_index":623,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validateenvironmentvariables",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateenvironmentvariables(config",{"_index":621,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["validatesync",{"_index":614,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validatesync(validatedconfig",{"_index":627,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["validator",{"_index":328,"title":{},"body":{"classes/AreaCreationDto.html":{},"classes/AreaId.html":{},"classes/DicoDto.html":{},"classes/DiscordMsgReactionDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HookCreationDto.html":{},"classes/MailReactionDto.html":{},"classes/OauthCreationDto.html":{},"classes/OauthDictionnaryDto.html":{},"classes/SmsReactionDto.html":{},"classes/TokenCreationDto.html":{},"classes/UserCreationDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/Username.html":{},"dependencies.html":{}}}],["value",{"_index":437,"title":{},"body":{"injectables/AreasService.html":{},"injectables/UserAreas.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":453,"title":{},"body":{"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/UserService.html":{}}}],["var",{"_index":185,"title":{},"body":{"injectables/ActionsService.html":{},"controllers/AreasController.html":{},"injectables/AreasService.html":{},"injectables/OauthService.html":{},"injectables/UserAreas.html":{},"controllers/WebhooksController.html":{}}}],["variable",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1237,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":788,"title":{},"body":{"controllers/ReactionsController.html":{},"properties.html":{}}}],["void",{"_index":405,"title":{},"body":{"injectables/AreasService.html":{}}}],["watch",{"_index":1194,"title":{},"body":{"index.html":{}}}],["weather",{"_index":207,"title":{},"body":{"injectables/ActionsService.html":{}}}],["webhook",{"_index":771,"title":{},"body":{"controllers/ReactionsController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webhook(body.url",{"_index":805,"title":{},"body":{"controllers/ReactionsController.html":{}}}],["webhooks",{"_index":1054,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["webhooks.controller",{"_index":1088,"title":{},"body":{"modules/WebhooksModule.html":{}}}],["webhooks.service",{"_index":1067,"title":{},"body":{"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{}}}],["webhooks/webhooks.module",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["webhookscontroller",{"_index":1052,"title":{"controllers/WebhooksController.html":{}},"body":{"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"coverage.html":{}}}],["webhooksmodule",{"_index":273,"title":{"modules/WebhooksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WebhooksModule.html":{},"modules.html":{},"overview.html":{}}}],["webhooksservice",{"_index":1066,"title":{"injectables/WebhooksService.html":{}},"body":{"controllers/WebhooksController.html":{},"modules/WebhooksModule.html":{},"injectables/WebhooksService.html":{},"coverage.html":{},"overview.html":{}}}],["webhooksservices",{"_index":1069,"title":{},"body":{"controllers/WebhooksController.html":{}}}],["website",{"_index":1222,"title":{},"body":{"index.html":{}}}],["well",{"_index":367,"title":{},"body":{"controllers/AreasController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["world",{"_index":311,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":1213,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AboutModule.html":{},"modules/ActionsModule.html":{},"modules/AppModule.html":{},"modules/AreasModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/ReactionsModule.html":{},"modules/ServicesModule.html":{},"modules/UserModule.html":{},"modules/WebhooksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AboutController.html":{"url":"controllers/AboutController.html","title":"controller - AboutController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AboutController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/about/about.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                about.json\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                respond\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        respond\n                        \n                    \n                \n            \n            \n                \n                    \n                    respond(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/about/about.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from '@nestjs/common';\nimport { qAllFieldsFromWhere } from '../queries/queries'\nimport { AboutService } from './about.service';\n\n@Controller('about.json')\nexport class AboutController {\n    constructor(\n        private readonly aboutService: AboutService\n    ) { }\n\n    @Get()\n    async respond(@Req() req, @Res() res) {\n        res.status(200).send(await this.aboutService.aboutJson(req.ip))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AboutModule.html":{"url":"modules/AboutModule.html","title":"module - AboutModule","body":"\n                   \n\n\n\n\n    Modules\n    AboutModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AboutModule\n\n\n\ncluster_AboutModule_providers\n\n\n\n\nAboutService\n\nAboutService\n\n\n\nAboutModule\n\nAboutModule\n\nAboutModule -->\n\nAboutService->AboutModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/about/about.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AboutService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AboutController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AboutController } from './about.controller';\nimport { AboutService } from './about.service';\n\n@Module({\n  controllers: [AboutController],\n  providers: [AboutService],\n})\nexport class AboutModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AboutService.html":{"url":"injectables/AboutService.html","title":"injectable - AboutService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AboutService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/about/about.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                aboutJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool)\n                    \n                \n                        \n                            \n                                Defined in src/about/about.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        aboutJson\n                        \n                    \n                \n            \n            \n                \n                    \n                    aboutJson(ip: any)\n                \n            \n\n\n            \n                \n                    Defined in src/about/about.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ip\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik';\n\n@Injectable()\nexport class AboutService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool\n    ) {}\n\n    async aboutJson(ip: any) {\n        const services = await this.pool.query(sql`SELECT * FROM service`)\n        let res = {\n            client: {\n                host: ip\n            },\n            server: {\n                current_time: Date.now(),\n                services: []\n            }\n        }\n        for (const service of services.rows) {\n            let qActions = await this.pool.query(sql`SELECT * FROM adictionnary WHERE service_id = ${service.id}`)\n            let qReactions = await this.pool.query(sql`SELECT * FROM readictionnary WHERE service_id = ${service.id}`)\n            let actionsTab = [];\n            let reactionsTab = [];\n            for (const action of qActions.rows) {\n                const toPush = {\n                    name: action.name,\n                    description: action.description\n                }\n                actionsTab.push(toPush)\n            }\n            for (const reaction of qReactions.rows) {\n                const toPush = {\n                    name: reaction.name,\n                    description: reaction.description\n                }\n                reactionsTab.push(toPush)\n            }\n            res.server.services.push({\n                name: service.name,\n                actions: actionsTab,\n                reactions: reactionsTab\n            })\n        }\n        return res;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ActionsController.html":{"url":"controllers/ActionsController.html","title":"controller - ActionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ActionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/actions/actions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                actions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHook(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Gitlab')\n                \n            \n\n            \n                \n                    Defined in src/actions/actions.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\n\n@Controller('actions')\nexport class ActionsController {\n    @Post('/Gitlab')\n    async createHook(@Body() body) {\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ActionsModule.html":{"url":"modules/ActionsModule.html","title":"module - ActionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ActionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ActionsModule\n\n\n\ncluster_ActionsModule_providers\n\n\n\n\nActionsService\n\nActionsService\n\n\n\nActionsModule\n\nActionsModule\n\nActionsModule -->\n\nActionsService->ActionsModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nActionsModule -->\n\nOauthService->ActionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/actions/actions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActionsService\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ActionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, HttpService } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { OauthService } from 'src/oauth/oauth.service';\nimport { ActionsController } from './actions.controller';\nimport { ActionsService } from './actions.service';\n\n@Module({\n  imports: [HttpModule],\n  controllers: [ActionsController],\n  providers: [ActionsService, OauthService]\n})\nexport class ActionsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ActionsService.html":{"url":"injectables/ActionsService.html","title":"injectable - ActionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ActionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/actions/actions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAction\n                            \n                            \n                                    Async\n                                createArea\n                            \n                            \n                                    Async\n                                createHookGitlab\n                            \n                            \n                                    Async\n                                createWeather\n                            \n                            \n                                    Async\n                                updateWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool, httpService: HttpService, oauthService: OauthService)\n                    \n                \n                        \n                            \n                                Defined in src/actions/actions.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oauthService\n                                                  \n                                                        \n                                                                        OauthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAction(params: any, service: string, userId: string, action_name: string, action: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/actions/actions.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArea(id: number, action_name: string, user_id: string, param: any)\n                \n            \n\n\n            \n                \n                    Defined in src/actions/actions.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHookGitlab\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHookGitlab(params: HookCreationDto, userId: string, action_name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/actions/actions.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                HookCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWeather(params: any, id)\n                \n            \n\n\n            \n                \n                    Defined in src/actions/actions.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWeather()\n                \n            \n\n\n            \n                \n                    Defined in src/actions/actions.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { OauthService } from 'src/oauth/oauth.service';\nimport { HookCreationDto } from './actions.dto';\nimport { AxiosRequestConfig } from 'axios'\nimport { Cron } from '@nestjs/schedule';\n\n\n@Injectable()\nexport class ActionsService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool,\n        private readonly httpService: HttpService,\n        private readonly oauthService: OauthService\n    ) { }\n\n    async createHookGitlab(params: HookCreationDto, userId: string, action_name:string) {\n        let event: string\n        console.log(action_name)\n        switch(action_name) {\n            case \"Push event\":\n                event = \"push_events\"\n            case \"Merge request event\":\n                event = \"merge_requests_events\"\n            case \"Issues event\":\n                event = \"issues_events\"\n            case \"Deployment event\":\n                event = \"deployment_events\"\n            case \"Confidential issues event\":\n                event = \"confidential_issues_events\"\n            default:\n                break\n        }\n        const token = await this.oauthService.getTokenForService(userId, params.service)\n        const url = `http://pantharea.fun:8080/webhooks/${params.service}`\n        var data = `{\"id\": ${params.project_id.toString()},\"url\": ${url},${event}:true}`;\n        var config: AxiosRequestConfig = {\n            method: 'post',\n            url: `https://gitlab.com/api/v4/projects/${params.project_id}/hooks?url=${url}`,\n            headers: {\n                'Authorization': `Bearer ${token.token}`,\n                'Content-Type': 'application/json'\n            },\n            data : data\n        };\n        try {\n            const a = await this.httpService.post(`https://gitlab.com/api/v4/projects/${params.project_id}/hooks?url=${url}`, data, config ).toPromise()\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    //city:string,previous_value:string,service:string\n    async updateWeather() {\n        const areas = await this.pool.query(sql`SELECT id, params FROM action WHERE strpos(action.params, 'Weather') != 0`)\n        for (const elem of areas.rows) {\n            const params = JSON.parse(elem.params)\n            const res = await this.httpService.get(`http://api.weatherapi.com/v1/current.json?key=bc3eb83b600343afb4e184537220503&q=${params.city}&aqi=no`).toPromise()\n            if (params.previous_value !== res.data.current.temp_c) {\n                const test = params\n                test.previous_value = res.data.current.temp_c\n                this.pool.query(sql`UPDATE action SET params = ${JSON.stringify(test)} WHERE id = ${elem.id}`)\n                const reactions = await this.pool.query(sql`SELECT * FROM reaction INNER JOIN area ON area.id_react = reaction.id WHERE area.id_act = ${elem.id}`)\n                for (const reaction of reactions.rows) {\n                    console.log (reaction)\n                    await this.httpService.post(`http://pantharea.fun:8080/reactions/${reaction.reaction_route}`, reaction.params).toPromise()\n                }\n            }\n        }\n    }\n\n    async createWeather(params: any, id) {\n        console.log(params)\n        const res = await this.httpService.get(`http://api.weatherapi.com/v1/current.json?key=bc3eb83b600343afb4e184537220503&q=${params.city}&aqi=no`).toPromise()\n\n        const tmp = params\n        tmp.previous_value = res.data.current.temp_c\n        const newparams = JSON.stringify(tmp)\n        await this.pool.query(sql`UPDATE action SET params = ${newparams} WHERE id = ${id}`)\n    }\n\n    async createArea(id: number, action_name: string, user_id: string, param: any) {\n        console.log(action_name)\n        var params = JSON.stringify({action_type: action_name, user_id: user_id})\n        if (action_name === \"Area deleted\") {\n            params = JSON.stringify({action_type: action_name, user_id: user_id, id: param.id})\n        }\n        if (action_name === \"Detect number of areas\") {\n            params = JSON.stringify({action_type: action_name, user_id: user_id, nb: param.nb})\n        }\n        this.pool.query(sql`UPDATE action SET params = ${params} WHERE id = ${id}`)\n    }\n\n    async createAction(params: any, service:string ,userId: string, action_name: string, action: {id: number}) {\n        console.log(service)\n        switch (service) {\n            case \"Gitlab\":\n                await this.createHookGitlab({project_id: params.project_id, service: \"Gitlab\", scope: params.scope}, userId, action_name)\n                break;\n            case \"Weather\":\n                await this.createWeather(params, action.id)\n            case \"Area\":\n                this.createArea(action.id, action_name, userId, params)\n                break\n            default:\n                console.log(\"no action found\")\n                break;\n        }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAboutModule\n\nAboutModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutModule->AppModule\n\n\n\n\n\nActionsModule\n\nActionsModule\n\nAppModule -->\n\nActionsModule->AppModule\n\n\n\n\n\nAreasModule\n\nAreasModule\n\nAppModule -->\n\nAreasModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nReactionsModule\n\nReactionsModule\n\nAppModule -->\n\nReactionsModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWebhooksModule\n\nWebhooksModule\n\nAppModule -->\n\nWebhooksModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nServicesService\n\nServicesService\n\nAppModule -->\n\nServicesService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            ServicesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            ServicesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AboutModule\n                        \n                        \n                            ActionsModule\n                        \n                        \n                            AreasModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            ReactionsModule\n                        \n                        \n                            ServicesModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WebhooksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { SlonikModule } from 'nestjs-slonik';\nimport { ConfigModule } from '@nestjs/config';\nimport { validateEnvironmentVariables } from './config';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { OauthModule } from './oauth/oauth.module';\nimport { WebhooksModule } from './webhooks/webhooks.module';\nimport { AreasService } from './areas/areas.service';\nimport { AreasController } from './areas/areas.controller';\nimport { AreasModule } from './areas/areas.module';\nimport { ReactionsModule } from './reactions/reactions.module';\nimport { AboutModule } from './about/about.module';\nimport { ServicesService } from './services/services.service';\nimport { ServicesController } from './services/services.controller';\nimport { ServicesModule } from './services/services.module';\nimport { ActionsModule } from './actions/actions.module';\nimport { ScheduleModule } from '@nestjs/schedule'\n\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    SlonikModule.forRoot({\n      connectionUri: 'postgres://root:root@postgres/root',\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validate: validateEnvironmentVariables,\n      envFilePath: './.env',\n    }),\n    AuthModule,\n    UserModule,\n    OauthModule,\n    WebhooksModule,\n    AreasModule,\n    ReactionsModule,\n    AboutModule,\n    ServicesModule,\n    ActionsModule,],\n  controllers: [AppController, ServicesController],\n  providers: [AppService, ServicesService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaCreationDto.html":{"url":"classes/AreaCreationDto.html","title":"class - AreaCreationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaCreationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/areas/areas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action_id\n                            \n                            \n                                action_params\n                            \n                            \n                                reaction_id\n                            \n                            \n                                reaction_params\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        action_params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reaction_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reaction_params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsString, IsNumber } from \"class-validator\";\n\nexport class AreaCreationDto {\n    @IsString()\n    user_id: string\n\n    @IsString()\n    action_id: string\n\n    @IsString()\n    action_params: string\n\n    @IsString()\n    reaction_id: string\n\n    @IsString()\n    reaction_params: string\n}\n\nexport class DicoDto {\n    @IsString()\n    params: string\n\n    @IsString()\n    name: string\n\n    @IsString()\n    description: string\n\n    @IsNumber()\n    service_id: string\n\n    @IsNumber()\n    id: string\n\n    @IsString()\n    reaction_route: string\n}\n\nexport class AreaId {\n    @IsNumber()\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaId.html":{"url":"classes/AreaId.html","title":"class - AreaId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/areas/areas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsString, IsNumber } from \"class-validator\";\n\nexport class AreaCreationDto {\n    @IsString()\n    user_id: string\n\n    @IsString()\n    action_id: string\n\n    @IsString()\n    action_params: string\n\n    @IsString()\n    reaction_id: string\n\n    @IsString()\n    reaction_params: string\n}\n\nexport class DicoDto {\n    @IsString()\n    params: string\n\n    @IsString()\n    name: string\n\n    @IsString()\n    description: string\n\n    @IsNumber()\n    service_id: string\n\n    @IsNumber()\n    id: string\n\n    @IsString()\n    reaction_route: string\n}\n\nexport class AreaId {\n    @IsNumber()\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AreasController.html":{"url":"controllers/AreasController.html","title":"controller - AreasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AreasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/areas/areas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                areas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createArea\n                            \n                            \n                                    Async\n                                deleteArea\n                            \n                            \n                                    Async\n                                getAreasByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArea(user, body: AreaCreationDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/areas/areas.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AreaCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArea(user: UserAuth, body: AreaId, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/delete')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/areas/areas.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AreaId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAreasByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAreasByUser(user, body, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/get')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/areas/areas.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards, Res, BadRequestException, Delete } from '@nestjs/common';\nimport { AreaCreationDto, AreaId } from './areas.dto';\nimport { AreasService } from './areas.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from 'src/user/user.decorator';\nimport { userInfo } from 'os';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { HttpService } from '@nestjs/axios';\nimport { UserAreas } from 'src/user/user.areas';\n\n@Controller('areas')\nexport class AreasController {\n    constructor(\n        private readonly areasServices: AreasService,\n        private readonly httpService: HttpService,\n        private readonly usersArea: UserAreas\n    ) { }\n\n    @Post('/create')\n    @UseGuards(AuthGuard('jwt'))\n    async createArea(@User() user, @Body() body: AreaCreationDto, @Res() res) {\n        await this.areasServices.createArea(user.userId, body)\n        await this.usersArea.AreaNumber(user.userId)\n        res.status(200).send(\"Area well created\")\n    }\n\n    @Post('/delete')\n    @UseGuards(AuthGuard('jwt'))\n    async deleteArea(@User() user: UserAuth, @Body() body: AreaId, @Res() res) {\n        await this.areasServices.deleteArea(body.id.toString())\n        await this.usersArea.AreaNumber(user.userId)\n        const r = await this.httpService.post('http://localhost:8080/webhooks/Area', {action_type: \"Area deleted\", userId: user.userId, id: body.id}).toPromise()\n        // console.log(r)\n        res.status(200).send(\"Area deleted successfully\")\n    }\n\n    @Get('/get')\n    @UseGuards(AuthGuard('jwt'))\n    async getAreasByUser(@User() user, @Body() body, @Res() res) {\n        var userId;\n        if (user[\"payload\"]?.userId != undefined) {\n            userId = user[\"payload\"].userId\n        } else if (user.userId != undefined) {\n            userId = user.userId\n        } else {\n            throw new BadRequestException(\"Can't get user\")\n        }\n        res.status(200).json(await this.areasServices.getAreaByUser(userId))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AreasModule.html":{"url":"modules/AreasModule.html","title":"module - AreasModule","body":"\n                   \n\n\n\n\n    Modules\n    AreasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AreasModule\n\n\n\ncluster_AreasModule_providers\n\n\n\n\nActionsService\n\nActionsService\n\n\n\nAreasModule\n\nAreasModule\n\nAreasModule -->\n\nActionsService->AreasModule\n\n\n\n\n\nAreasService\n\nAreasService\n\nAreasModule -->\n\nAreasService->AreasModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nAreasModule -->\n\nOauthService->AreasModule\n\n\n\n\n\nUserAreas\n\nUserAreas\n\nAreasModule -->\n\nUserAreas->AreasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/areas/areas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActionsService\n                        \n                        \n                            AreasService\n                        \n                        \n                            OauthService\n                        \n                        \n                            UserAreas\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AreasController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { ActionsModule } from 'src/actions/actions.module';\nimport { ActionsService } from 'src/actions/actions.service';\nimport { OauthService } from 'src/oauth/oauth.service';\nimport { UserAreas } from 'src/user/user.areas';\nimport { AreasController } from './areas.controller';\nimport { AreasService } from './areas.service';\n\n@Module({\n    imports: [HttpModule],\n    providers: [AreasService, ActionsService, OauthService, UserAreas],\n    controllers: [AreasController]\n})\nexport class AreasModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AreasService.html":{"url":"injectables/AreasService.html","title":"injectable - AreasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AreasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/areas/areas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                callReaction\n                            \n                            \n                                checkBodyCreateArea\n                            \n                            \n                                    Async\n                                createArea\n                            \n                            \n                                    Async\n                                createReaction\n                            \n                            \n                                    Async\n                                deleteArea\n                            \n                            \n                                    Async\n                                getAreaByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool, httpService: HttpService, actionsService: ActionsService)\n                    \n                \n                        \n                            \n                                Defined in src/areas/areas.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionsService\n                                                  \n                                                        \n                                                                        ActionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        callReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callReaction(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkBodyCreateArea\n                        \n                    \n                \n            \n            \n                \ncheckBodyCreateArea(body: AreaCreationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AreaCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArea(userId: string, body: AreaCreationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AreaCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createReaction(serviceName: string, user_id: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    serviceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArea(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAreaByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAreaByUser(usrId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/areas/areas.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usrId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpModule, HttpService } from '@nestjs/axios';\nimport { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik';\nimport { ActionsService } from 'src/actions/actions.service';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { AreaCreationDto, DicoDto } from './areas.dto';\nimport { qFirstFieldsFromWhere, qDeleteFieldsFromWhere } from 'src/queries/queries';\n\n@Injectable()\nexport class AreasService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool,\n        private readonly httpService: HttpService,\n        private readonly actionsService: ActionsService,\n    ) { }\n\n    async callReaction(params: string) {\n        var action = await this.pool.query(sql`SELECT * FROM action WHERE params = ${params} `)\n        if (action.rowCount === 0) {\n            console.log(\"PARAMS\", params)\n            return\n        }\n        console.log(action.rows)\n        for (var test of action.rows) {\n            let area = await this.pool.query(sql`SELECT * FROM area WHERE id_act = ${test.id}`)\n            console.log(area)\n            for (var elem of area.rows) {\n                console.log(\"REACTION\")\n                let reaction = await this.pool.query(sql`SELECT * FROM reaction WHERE id = ${elem.id_react}`)\n                console.log(reaction)\n                let data = JSON.parse(reaction.rows[0].params.toString())\n                this.httpService.post(`http://pantharea.fun:8080/reactions/${reaction.rows[0].reaction_route}`, data).toPromise()\n            }\n        }\n    }\n\n    checkBodyCreateArea(body: AreaCreationDto) {\n        if (body.action_id === undefined || body.reaction_id === undefined)\n            throw new BadRequestException(\"Missing action or reaction\")\n        Object.keys(body.action_params).forEach(key => {\n            var value = body.action_params[key]\n            if (value === null || value === \"\")\n                throw new BadRequestException(\"Bad value for: \" + JSON.stringify(key))\n        });\n        Object.keys(body.reaction_params).forEach(key => {\n            var value = body.reaction_params[key]\n            if (value === null || value === \"\")\n                throw new BadRequestException(\"Bad value for: \" + JSON.stringify(key))\n        });\n    }\n\n    async createArea(userId: string, body: AreaCreationDto) {\n        this.checkBodyCreateArea(body)\n\n        const reaction_dico = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"service_id\", \"params\"], from: \"readictionnary\", where: \"id\", value: body.reaction_id});\n        const reaction_service = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"name\"], from: \"service\", where: \"id\", value: reaction_dico[\"service_id\"]})\n        const action_dico = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"service_id\", \"params\", \"name\"], from: \"adictionnary\", where: \"id\", value: body.action_id})\n        const action = await this.pool.query(sql`INSERT INTO action (params, dico_id)\n        VALUES (${JSON.stringify(body.action_params)}, ${body.action_id}) RETURNING id;`)\n\n        const action_service = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"*\"], from: \"service\", where: \"id\", value: action_dico[\"service_id\"]})\n\n        await this.actionsService.createAction(body.action_params, action_service[\"name\"].toString(), userId, action_dico[\"name\"], action.rows[0])\n\n        const reaction = await this.pool.query(sql`INSERT INTO reaction (params, reaction_route,dico_id)\n        VALUES (${JSON.stringify(body.reaction_params)}, ${reaction_service[\"name\"]} ,${body.reaction_id}) RETURNING id;`)\n        console.log(\"EH JE PASSE ICI\")\n        const reaction_params = await this.createReaction(reaction_service[\"name\"], userId, reaction.rows[0].id)\n        console.log(\"EH JE PASSE ICI AUSSI \")\n        const area = await this.pool.query(sql`INSERT INTO area (\n            id_act,\n            id_react,\n            usr_id) VALUES (\n                ${action.rows[0].id},\n                ${reaction.rows[0].id},\n                ${userId})`)\n    }\n\n    async createReaction(serviceName: string, user_id: string, id: number) {\n        console.log(id)\n        if (serviceName === \"Area\") {\n            const reaction = await this.pool.query(sql`SELECT params FROM reaction WHERE id = ${id}`)\n            const tmp = JSON.parse(reaction.rows[0].params)\n            tmp.user_id = user_id\n            await this.pool.query(sql`UPDATE reaction SET params = ${JSON.stringify(tmp)} WHERE id = ${id}`)\n            return\n        }\n    }\n\n    async deleteArea(id: string) {\n        await qDeleteFieldsFromWhere({ pool: this.pool, from: \"area\", where: \"id\", value: id})\n    }\n\n    async getAreaByUser(usrId: string) {\n        const areas =  await this.pool.query(sql`SELECT * FROM area WHERE usr_id = ${usrId}`)\n        return areas.rows\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(body: UserLoginDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(body: UserCreationDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query, Res, UseGuards } from '@nestjs/common';\nimport { UserCreationDto, UserDto, UserLoginDto } from '../user/user.dto';\nimport { UserService } from '../user/user.service';\nimport { Response } from 'express';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { QueryResultRow } from 'slonik';\nimport { sign } from 'crypto';\n\nexport class UserAuth {\n    userId: string\n    username: string\n    constructor(data: UserAuth) {\n        Object.assign(this, data)\n    }\n}\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly userService: UserService,\n        private readonly jwtService: JwtService,\n        private configService: ConfigService\n    ) { }\n\n    @Post('register')\n    async registerUser(@Body() body: UserCreationDto, @Res() res: Response) {\n        const user = await this.userService.registerUser(body)\n        const payload = new UserAuth({ userId: user.id.toString(), username: user.username.toString() });\n        const signed_payload = this.jwtService.sign({payload: payload})\n        res.cookie('access_token', signed_payload, {\n            httpOnly: false,\n            domain: (process.env.NODE_ENV === 'development' ) ? 'localhost' : 'pantharea.fun',\n            sameSite: false,\n            expires: new Date(Date.now() + 1000 * 60 * 60 * 24),\n        }).send({\"message\": \"You had been well registered\"});\n    }\n\n    @Post('login')\n    async loginUser(@Body() body: UserLoginDto, @Res({passthrough: true}) res: Response) {\n        const user = await this.userService.getUser(body)\n        const payload = new UserAuth({ userId: user.id.toString(), username: user.username.toString() });\n        const signed_payload = this.jwtService.sign({payload: payload})\n        res.cookie('access_token', signed_payload, {\n            httpOnly: false,\n            domain: (process.env.NODE_ENV === 'development' ) ? 'localhost' : 'pantharea.fun',\n            sameSite: false,\n            expires: new Date(Date.now() + 1000 * 60 * 60 * 24),\n        }).send({\"message\": \"You had been well logged\"});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthStrategy\n\nAuthStrategy\n\nAuthModule -->\n\nAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config';\nimport { AuthStrategy } from './auth.strategy';\n\n\n@Module({\n  imports: [UserModule,\n    JwtModule.registerAsync(\n      {\n        inject: [\n          ConfigService\n        ],\n        useFactory: (config: ConfigService) => {\n          return {\n            secret: process.env.JWT_SECRET,\n            signOptions: {\n              expiresIn: '24h',\n            },\n          }\n        }\n      },\n    ),],\n  controllers: [AuthController],\n  providers: [AuthStrategy]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthStrategy.html":{"url":"injectables/AuthStrategy.html","title":"injectable - AuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuthStrategy extends PassportStrategy(Strategy) {\n    constructor() {\n        super({\n            jwtFromRequest: (req) => {\n                if (!req || !req.cookies) return null;\n                return req.cookies['access_token'];\n            },\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWT_SECRET,\n        });\n    }\n    async validate(data: any): Promise {\n        return true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DicoDto.html":{"url":"classes/DicoDto.html","title":"class - DicoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DicoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/areas/areas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                            \n                                reaction_route\n                            \n                            \n                                service_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reaction_route\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/areas/areas.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsString, IsNumber } from \"class-validator\";\n\nexport class AreaCreationDto {\n    @IsString()\n    user_id: string\n\n    @IsString()\n    action_id: string\n\n    @IsString()\n    action_params: string\n\n    @IsString()\n    reaction_id: string\n\n    @IsString()\n    reaction_params: string\n}\n\nexport class DicoDto {\n    @IsString()\n    params: string\n\n    @IsString()\n    name: string\n\n    @IsString()\n    description: string\n\n    @IsNumber()\n    service_id: string\n\n    @IsNumber()\n    id: string\n\n    @IsString()\n    reaction_route: string\n}\n\nexport class AreaId {\n    @IsNumber()\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordMsgReactionDto.html":{"url":"classes/DiscordMsgReactionDto.html","title":"class - DiscordMsgReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordMsgReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reactions/reactions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                embed\n                            \n                            \n                                fielddescription\n                            \n                            \n                                fieldname\n                            \n                            \n                                hookusername\n                            \n                            \n                                message\n                            \n                            \n                                title\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        embed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fielddescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fieldname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hookusername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional, IsString, IsUrl } from \"class-validator\"\nimport { Url } from \"url\"\n\nexport class MailReactionDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    recipient: string\n\n    @IsString()\n    subject: string\n\n    @IsString()\n    body: string\n}\n\nexport class DiscordMsgReactionDto {\n    @IsString()\n    url: string\n\n    @IsString()\n    message: string\n\n    @IsString()\n    hookusername: string\n\n    @IsBoolean()\n    embed: boolean\n\n    @IsOptional()\n    @IsString()\n    title: string\n    \n    @IsOptional()\n    @IsString()\n    fieldname: string\n\n    @IsOptional()\n    @IsString()\n    fielddescription: string\n    \n}\n\nexport class SmsReactionDto {\n    @IsString()\n    number: string\n\n    @IsString()\n    message: string\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariables.html":{"url":"classes/EnvironmentVariables.html","title":"class - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                BACKEND_ENVIRONMENT\n                            \n                            \n                                BACKEND_PORT\n                            \n                            \n                                CORS_ORIGIN\n                            \n                            \n                                JWT_SECRET\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        BACKEND_ENVIRONMENT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BackendEnvironment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(BackendEnvironment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BACKEND_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CORS_ORIGIN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/config.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsNumber, IsString, validateSync } from 'class-validator'\nimport { plainToClass, Type } from 'class-transformer'\n\n\nexport enum BackendEnvironment {\n    Local = 'local',\n    Development = 'development',\n    Production = 'production',\n    Test = 'test',\n}\n\n\nexport class EnvironmentVariables {\n    JWT_SECRET: string;\n\n    @IsEnum(BackendEnvironment)\n    BACKEND_ENVIRONMENT: BackendEnvironment;\n\n    @IsNotEmpty()\n    @IsString()\n    CORS_ORIGIN: string;\n\n    @Type(() => Number)\n    @IsNumber()\n    BACKEND_PORT: number;\n}\n\nexport function validateEnvironmentVariables(config: Record) {\n    const validatedConfig = plainToClass(EnvironmentVariables, config, {\n        enableImplicitConversion: true,\n    });\n    const errors = validateSync(validatedConfig, {\n        skipMissingProperties: false,\n    });\n\n    if (errors.length > 0) {\n        throw new Error(errors.toString());\n    }\n    return validatedConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GithubDto.html":{"url":"classes/GithubDto.html","title":"class - GithubDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GithubDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/webhooks/webhooks.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                repository\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/webhooks/webhooks.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\"\n\nclass Repository {\n  readonly full_name:string\n  readonly html_url:string\n}\n\nexport class GithubDto {\n  @Type(() => Repository)\n  readonly repository: Repository\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HookCreationDto.html":{"url":"classes/HookCreationDto.html","title":"class - HookCreationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HookCreationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/actions/actions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                project_id\n                            \n                            \n                                scope\n                            \n                            \n                                service\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        project_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/actions/actions.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/actions/actions.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/actions/actions.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsJSON, IsNumber, IsString } from \"class-validator\";\n\nexport class HookCreationDto {\n    @IsNumber()\n    project_id: number\n\n    @IsString()\n    service: string\n\n    @IsString()\n    scope: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MailReactionDto.html":{"url":"classes/MailReactionDto.html","title":"class - MailReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MailReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reactions/reactions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional, IsString, IsUrl } from \"class-validator\"\nimport { Url } from \"url\"\n\nexport class MailReactionDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    recipient: string\n\n    @IsString()\n    subject: string\n\n    @IsString()\n    body: string\n}\n\nexport class DiscordMsgReactionDto {\n    @IsString()\n    url: string\n\n    @IsString()\n    message: string\n\n    @IsString()\n    hookusername: string\n\n    @IsBoolean()\n    embed: boolean\n\n    @IsOptional()\n    @IsString()\n    title: string\n    \n    @IsOptional()\n    @IsString()\n    fieldname: string\n\n    @IsOptional()\n    @IsString()\n    fielddescription: string\n    \n}\n\nexport class SmsReactionDto {\n    @IsString()\n    number: string\n\n    @IsString()\n    message: string\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAuthLink\n                            \n                            \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthLink(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n            \n                \n                    Defined in src/oauth/oauth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(user: UserAuth, body: TokenCreationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/oauth/oauth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                TokenCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik'\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { User } from 'src/user/user.decorator';\nimport { TokenCreationDto } from './oauth.dto';\nimport { OauthService } from './oauth.service';\n\n@Controller('oauth')\nexport class OauthController {\n\n    constructor(\n        private readonly oauthService: OauthService\n    ) { }\n\n    @Get('')\n    async getAuthLink(@Body() body: { name: string }): Promise {\n        const service = await this.oauthService.getLink(body.name)\n        return service\n    }\n\n    @Post('')\n    @UseGuards(AuthGuard('jwt'))\n    async getToken(@User() user: UserAuth, @Body() body: TokenCreationDto): Promise {\n        // const token = await this.oauthService.getToken(body)\n        await this.oauthService.storeToken(body.token, user.userId, body.serviceName)\n        return \"Token well added to DB\"\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OauthCreationDto.html":{"url":"classes/OauthCreationDto.html","title":"class - OauthCreationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OauthCreationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                generated_at\n                            \n                            \n                                refresh_token\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class UserCreationDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    image: string\n}\n\nexport class UserDto {\n    @IsString()\n    id: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    username: string\n\n    @IsString()\n    created_at: string\n}\n\nexport class UserLoginDto {\n    @IsString()\n    email?: string\n\n    @IsString()\n    password: string\n}\n\nexport class OauthCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    refresh_token: string\n\n    @IsString()\n    duration: string\n\n    @IsString()\n    generated_at: string\n}\n\nexport class Username {\n    @IsString()\n    username: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OauthDictionnaryDto.html":{"url":"classes/OauthDictionnaryDto.html","title":"class - OauthDictionnaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OauthDictionnaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                client_id\n                            \n                            \n                                client_secret\n                            \n                            \n                                    Optional\n                                logo\n                            \n                            \n                                query_code\n                            \n                            \n                                query_token\n                            \n                            \n                                redirect_uri\n                            \n                            \n                                scope\n                            \n                            \n                                service\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        query_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        query_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class OauthDictionnaryDto {\n\n    @IsString()\n    service: string\n\n    @IsString()\n    query_code: string\n\n    @IsString()\n    query_token: string\n\n    @IsString()\n    @IsOptional()\n    logo?: string\n\n    @IsString()\n    client_id: string\n\n    @IsString()\n    client_secret: string\n\n    @IsString()\n    redirect_uri: string\n\n    @IsString()\n    scope: string\n}\n\nexport class TokenCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    serviceName: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\n\nOauthService\n\nOauthService\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { HttpModule, HttpService } from '@nestjs/axios';\n\n@Module({\n  imports: [HttpModule],\n  providers: [OauthService],\n  controllers: [OauthController]\n})\nexport class OauthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLink\n                            \n                            \n                                    Private\n                                    Async\n                                getService\n                            \n                            \n                                    Async\n                                getTokenForService\n                            \n                            \n                                    Async\n                                storeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLink(serviceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/oauth/oauth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    serviceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getService(serviceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/oauth/oauth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    serviceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokenForService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenForService(userId: string, service: string)\n                \n            \n\n\n            \n                \n                    Defined in src/oauth/oauth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        storeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    storeToken(token: string, userId: string, service: string)\n                \n            \n\n\n            \n                \n                    Defined in src/oauth/oauth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik'\nimport { OauthDictionnaryDto, TokenCreationDto } from './oauth.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ReactionsService } from 'src/reactions/reactions.service';\n\n@Injectable()\nexport class OauthService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool,\n        private readonly httpService: HttpService,\n    ) { }\n\n    private async getService(serviceName: string) {\n        const res = await this.pool.query(sql`SELECT * FROM service WHERE name = ${serviceName}`)\n        const service = res.rows[0]\n        return service\n    }\n\n    async getLink(serviceName: string): Promise {\n        const service = await this.getService(serviceName)\n\n        return `${service.query_code}?client_id=${service.client_id}&redirect_uri=${service.redirect_uri}&response_type=code&scope=${service.scope}`\n    }\n\n    // async getTokenLink(body: TokenCreationDto): Promise {\n    //     const service = await this.getService(body.serviceName)\n\n    //     return `${service.query_token}?client_id=${service.client_id}&client_secret=${service.client_secret}&redirect_uri=${service.redirect_uri}&code=${body.code}&grant_type=authorization_code`\n    // }\n    // async getToken(body: TokenCreationDto): Promise {\n    //     const uri = await this.getTokenLink(body);\n    //     const res = await this.httpService.post(uri).toPromise()\n    //     const test = res.data\n    //     if (test.hasOwnProperty('access_token'))\n    //         return test.access_token\n    //     const params: string[] = test.split('&')\n    //     var map = new Map()\n    //     params.forEach((elem) => {\n    //         map.set(elem.split('=')[0], elem.split('=')[1])\n    //     })\n    //     return map.get('access_token')\n    // }\n\n    async storeToken(token: string, userId: string, service: string) {\n        console.log(token)\n        console.log(userId)\n        console.log(service)\n        const tok = await this.pool.query(sql`SELECT * FROM oauth WHERE service = ${service} AND usr_id = ${userId}`)\n        if (tok.rowCount === 1) {\n            await this.pool.query(sql`UPDATE oauth SET token = ${token} WHERE service = ${service} AND usr_id = ${userId}`)\n            return\n        }\n        await this.pool.query(sql`INSERT INTO oauth (token, refresh_token, duration, generated_at, usr_id, service) VALUES (${token}, 'none', 'none', now(), ${userId}, ${service})`)\n    }\n\n    async getTokenForService(userId: string, service: string) {\n        const tokenList = await this.pool.query(sql`SELECT token FROM oauth WHERE service = ${service} AND usr_id = ${userId}`)\n        if (tokenList.rowCount >= 1) {\n            return tokenList.rows[0]\n        }\n        throw new NotFoundException('No token registered for this service')\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReactionsController.html":{"url":"controllers/ReactionsController.html","title":"controller - ReactionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReactionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reactions/reactions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reactions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeUsername\n                            \n                            \n                                    Async\n                                reactionDiscord\n                            \n                            \n                                    Async\n                                reactionMail\n                            \n                            \n                                    Async\n                                reactionSms\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUsername(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Area')\n                \n            \n\n            \n                \n                    Defined in src/reactions/reactions.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionDiscord\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionDiscord(body: DiscordMsgReactionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Discord')\n                \n            \n\n            \n                \n                    Defined in src/reactions/reactions.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                DiscordMsgReactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionMail(config: MailReactionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Mailjet')\n                \n            \n\n            \n                \n                    Defined in src/reactions/reactions.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                MailReactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionSms\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionSms(body: SmsReactionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Sms')\n                \n            \n\n            \n                \n                    Defined in src/reactions/reactions.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SmsReactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        require('dotenv').config()\nimport { Req, Body, Controller, Post } from '@nestjs/common';\nimport { MessageBuilder } from 'discord-webhook-node';\nimport { UserService } from 'src/user/user.service';\nimport { MailReactionDto, DiscordMsgReactionDto, SmsReactionDto } from './reactions.dto';\nconst { Webhook } = require('discord-webhook-node');\nconst twilio = require('twilio')(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);\n\n\n\n@Controller('reactions')\nexport class ReactionsController {\n    constructor(\n        private readonly usersService: UserService\n    ) {}\n    \n    @Post('/Mailjet')\n    async reactionMail(@Body() config: MailReactionDto) {\n        console.log(\"JE PASSE ICI\")\n        const mailjet = require ('node-mailjet')\n        .connect('95d7f3e348ada34e2587a04a86442e33', 'ea353c779dbd2fa1d3d4372b194a6f95')\n        const request = mailjet\n        .post(\"send\", {'version': 'v3.1'})\n        .request({\n        \"Messages\":[\n            {\n            \"From\": {\n                \"Email\": \"areakinaemba@gmail.com\",\n                \"Name\": \"Pantharea\"\n            },\n            \"To\": [\n                {\n                \"Email\": config.recipient,\n                \"Name\": config.username\n                }\n            ],\n            \"Subject\": config.subject,\n            \"TextPart\": config.body\n            }\n        ]\n        })\n        request\n        .then((result) => {\n            console.log(\"test: \", result.body)\n        })\n        .catch((err) => {\n            console.log(err.statusCode)\n        })\n\n    }\n\n    @Post('Discord')\n    async reactionDiscord(@Body() body : DiscordMsgReactionDto) {\n        const hook = new Webhook(body.url)\n        hook.setUsername(body.hookusername)\n\n        if (body.title!== null && body.title !== undefined) {\n            const embed = new MessageBuilder()\n            embed.setFooter('Sent with :heart: by AREA')\n            embed.setTitle(body.title)\n            embed.addField(body.fieldname, body.fielddescription)\n            embed.setDescription(body.message)\n            hook.send(embed)\n            return\n        }\n        hook.send(body.message)\n    }\n\n    @Post('Area')\n    async changeUsername(@Body() body: {newUsername: string, user_id: string})\n    {\n        this.usersService.changeUsername(body.user_id, body.newUsername)\n    }\n\n    @Post('Sms')\n    async reactionSms(@Body() body : SmsReactionDto) {\n        twilio.messages\n      .create({body: body.message, from: '+15076936709', to: body.number})\n      .then(message => console.log(message));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReactionsModule.html":{"url":"modules/ReactionsModule.html","title":"module - ReactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ReactionsModule\n\n\n\ncluster_ReactionsModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nReactionsModule\n\nReactionsModule\n\nReactionsModule -->\n\nUserService->ReactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reactions/reactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReactionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, HttpService } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { ReactionsController } from './reactions.controller';\n\n@Module({\n  controllers: [ReactionsController],\n  providers: [UserService],\n  imports: [HttpModule]\n})\nexport class ReactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReactionsService.html":{"url":"injectables/ReactionsService.html","title":"injectable - ReactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reactions/reactions.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ReactionsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Repository.html":{"url":"classes/Repository.html","title":"class - Repository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Repository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/webhooks/webhooks.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                full_name\n                            \n                            \n                                    Readonly\n                                html_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/webhooks/webhooks.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        html_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/webhooks/webhooks.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\"\n\nclass Repository {\n  readonly full_name:string\n  readonly html_url:string\n}\n\nexport class GithubDto {\n  @Type(() => Repository)\n  readonly repository: Repository\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ServicesController.html":{"url":"controllers/ServicesController.html","title":"controller - ServicesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ServicesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/services.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                services\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getActionsByServiceId\n                            \n                            \n                                    Async\n                                getReactionsByServiceId\n                            \n                            \n                                    Async\n                                getServices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getActionsByServiceId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActionsByServiceId(usr: UserAuth, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('actions')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/services/services.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReactionsByServiceId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReactionsByServiceId(usr: UserAuth, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('reactions')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/services/services.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getServices\n                        \n                    \n                \n            \n            \n                \n                    \n                    getServices(usr: UserAuth, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/services/services.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body ,Get, UseGuards, Req } from '@nestjs/common';\nimport { ServicesService } from './services.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { User } from '../user/user.decorator';\n\n@Controller('services')\nexport class ServicesController {\n    constructor(\n        private readonly servicesService: ServicesService\n    ) { }\n\n    @Get()\n    @UseGuards(AuthGuard('jwt'))\n    async getServices(@User() usr: UserAuth, @Req() req) {\n        return this.servicesService.getServices();\n    }\n\n    @Get('actions')\n    @UseGuards(AuthGuard('jwt'))\n    async getActionsByServiceId(@User() usr: UserAuth, @Body() body: { id: number }) {\n        return this.servicesService.getActionsByServiceId(body.id);\n    }\n\n    @Get('reactions')\n    @UseGuards(AuthGuard('jwt'))\n    async getReactionsByServiceId(@User() usr: UserAuth, @Body() body: { id: number }) {\n        return this.servicesService.getReactionsByServiceId(body.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_providers\n\n\n\ncluster_ServicesModule_exports\n\n\n\n\nServicesService \n\nServicesService \n\n\n\nServicesModule\n\nServicesModule\n\nServicesService  -->\n\nServicesModule->ServicesService \n\n\n\n\n\nServicesService\n\nServicesService\n\nServicesModule -->\n\nServicesService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ServicesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ServicesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ServicesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ServicesController } from './services.controller'\nimport { ServicesService } from './services.service';\n\n\n@Module({\n\n    providers: [ServicesService],\n    exports: [ServicesService],\n    controllers: [ServicesController]\n})\nexport class ServicesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServicesService.html":{"url":"injectables/ServicesService.html","title":"injectable - ServicesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ServicesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/services.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getActionsByServiceId\n                            \n                            \n                                    Async\n                                getReactionsByServiceId\n                            \n                            \n                                    Async\n                                getServices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool)\n                    \n                \n                        \n                            \n                                Defined in src/services/services.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getActionsByServiceId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActionsByServiceId(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/services/services.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReactionsByServiceId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReactionsByServiceId(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/services/services.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getServices\n                        \n                    \n                \n            \n            \n                \n                    \n                    getServices()\n                \n            \n\n\n            \n                \n                    Defined in src/services/services.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik';\n\n@Injectable()\nexport class ServicesService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool\n    ) {}\n\n    async getServices() {\n        let services = await this.pool.query(sql`SELECT * FROM service`)\n        let res = []\n        let idService;\n        for (const service of services.rows) {\n            idService = service.id\n            res.push({\n                \"id\": service.id,\n                \"name\": service.name,\n                \"logo\": service.logo,\n                \"actions\": await this.getActionsByServiceId(idService),\n                \"reactions\": await this.getReactionsByServiceId(idService),\n            })\n        }\n        return res;\n    }\n\n    async getActionsByServiceId(id: number) {\n        let actions = await this.pool.query(sql`SELECT * FROM adictionnary WHERE service_id = ${id}`)\n        return actions.rows;\n    }\n\n    async getReactionsByServiceId(id: number) {\n        let reactions = await this.pool.query(sql`SELECT * FROM readictionnary WHERE service_id = ${id}`)\n        return reactions.rows;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SmsReactionDto.html":{"url":"classes/SmsReactionDto.html","title":"class - SmsReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SmsReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reactions/reactions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reactions/reactions.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional, IsString, IsUrl } from \"class-validator\"\nimport { Url } from \"url\"\n\nexport class MailReactionDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    recipient: string\n\n    @IsString()\n    subject: string\n\n    @IsString()\n    body: string\n}\n\nexport class DiscordMsgReactionDto {\n    @IsString()\n    url: string\n\n    @IsString()\n    message: string\n\n    @IsString()\n    hookusername: string\n\n    @IsBoolean()\n    embed: boolean\n\n    @IsOptional()\n    @IsString()\n    title: string\n    \n    @IsOptional()\n    @IsString()\n    fieldname: string\n\n    @IsOptional()\n    @IsString()\n    fielddescription: string\n    \n}\n\nexport class SmsReactionDto {\n    @IsString()\n    number: string\n\n    @IsString()\n    message: string\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenCreationDto.html":{"url":"classes/TokenCreationDto.html","title":"class - TokenCreationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenCreationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                serviceName\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        serviceName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class OauthDictionnaryDto {\n\n    @IsString()\n    service: string\n\n    @IsString()\n    query_code: string\n\n    @IsString()\n    query_token: string\n\n    @IsString()\n    @IsOptional()\n    logo?: string\n\n    @IsString()\n    client_id: string\n\n    @IsString()\n    client_secret: string\n\n    @IsString()\n    redirect_uri: string\n\n    @IsString()\n    scope: string\n}\n\nexport class TokenCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    serviceName: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAreas.html":{"url":"injectables/UserAreas.html","title":"injectable - UserAreas","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAreas\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.areas.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                AreaNumber\n                            \n                            \n                                    Async\n                                getActionOrReactionInfos\n                            \n                            \n                                    Async\n                                getAreas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool, areaService: AreasService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.areas.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        areaService\n                                                  \n                                                        \n                                                                        AreasService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        AreaNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    AreaNumber(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.areas.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getActionOrReactionInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActionOrReactionInfos(area: any, aor: AorREA)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.areas.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    area\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aor\n                                    \n                                                AorREA\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAreas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAreas(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.areas.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CallTracker } from 'assert/strict';\nimport { access } from 'fs';\nimport { InjectPool } from 'nestjs-slonik';\nimport { DatabasePool, sql } from 'slonik'\nimport { AreasService } from 'src/areas/areas.service';\nimport { qFirstFieldsFromWhere, qAllFieldsFromWhere, AorREA } from 'src/queries/queries';\n\n@Injectable()\nexport class UserAreas {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool,\n        private readonly areaService: AreasService\n    ) { }\n\n    async getActionOrReactionInfos(area: any, aor: AorREA) {\n        // Alternative name for query action or reaction\n        const elem_id = aor === AorREA.Action ? area[\"id_act\"] : area[\"id_react\"]\n        const elem_name = aor === AorREA.Action ? \"action\" : \"reaction\"\n        const dico_name = aor === AorREA.Action ? \"adictionnary\" : \"readictionnary\"\n\n        // Query elem, then its dico model, then the informations on its service\n        var elem = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"params\", \"dico_id\"], from: elem_name, where: \"id\", value: elem_id})\n        var dico = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"name\", \"description\", \"service_id\"], from: dico_name, where: \"id\", value: elem[\"dico_id\"] })\n        var service = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"name\", \"logo\"], from: \"service\", where: \"id\", value: dico[\"service_id\"] })\n\n        // Format the output\n        return {\n            \"name\": dico[\"name\"],\n            \"description\": dico[\"description\"],\n            \"params\": JSON.parse(elem[\"params\"]),\n            \"service\": {\n                \"name\": service[\"name\"],\n                \"logo\": service[\"logo\"]\n            }\n        }   \n    }\n\n    async getAreas(userId: string) {\n        // Query area from user id\n        var areas = await qAllFieldsFromWhere({ pool: this.pool, selectFields: [\"id\", \"id_act\", \"id_react\"], from: \"area\", where: \"usr_id\", value: userId })\n        \n        // Format action & reaction response\n        var res = []\n        for (const area of areas) {\n            var elem = {\n                \"id\": area[\"id\"],\n                \"action\": await this.getActionOrReactionInfos(area, AorREA.Action),\n                \"reaction\": await this.getActionOrReactionInfos(area, AorREA.Reaction)\n            }\n            res.push(elem)\n        }\n        return res\n    }\n\n    async AreaNumber(userId: string) {\n        const areas = await this.getAreas(userId)\n        const params = {\n            action_type: \"Detect number of areas\",\n            user_id: userId,\n            nb: areas.length\n        }\n        this.areaService.callReaction(JSON.stringify(params))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAuth.html":{"url":"classes/UserAuth.html","title":"class - UserAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: UserAuth)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.controller.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        UserAuth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Post, Query, Res, UseGuards } from '@nestjs/common';\nimport { UserCreationDto, UserDto, UserLoginDto } from '../user/user.dto';\nimport { UserService } from '../user/user.service';\nimport { Response } from 'express';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { QueryResultRow } from 'slonik';\nimport { sign } from 'crypto';\n\nexport class UserAuth {\n    userId: string\n    username: string\n    constructor(data: UserAuth) {\n        Object.assign(this, data)\n    }\n}\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly userService: UserService,\n        private readonly jwtService: JwtService,\n        private configService: ConfigService\n    ) { }\n\n    @Post('register')\n    async registerUser(@Body() body: UserCreationDto, @Res() res: Response) {\n        const user = await this.userService.registerUser(body)\n        const payload = new UserAuth({ userId: user.id.toString(), username: user.username.toString() });\n        const signed_payload = this.jwtService.sign({payload: payload})\n        res.cookie('access_token', signed_payload, {\n            httpOnly: false,\n            domain: (process.env.NODE_ENV === 'development' ) ? 'localhost' : 'pantharea.fun',\n            sameSite: false,\n            expires: new Date(Date.now() + 1000 * 60 * 60 * 24),\n        }).send({\"message\": \"You had been well registered\"});\n    }\n\n    @Post('login')\n    async loginUser(@Body() body: UserLoginDto, @Res({passthrough: true}) res: Response) {\n        const user = await this.userService.getUser(body)\n        const payload = new UserAuth({ userId: user.id.toString(), username: user.username.toString() });\n        const signed_payload = this.jwtService.sign({payload: payload})\n        res.cookie('access_token', signed_payload, {\n            httpOnly: false,\n            domain: (process.env.NODE_ENV === 'development' ) ? 'localhost' : 'pantharea.fun',\n            sameSite: false,\n            expires: new Date(Date.now() + 1000 * 60 * 60 * 24),\n        }).send({\"message\": \"You had been well logged\"});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOauthToUsr\n                            \n                            \n                                    Async\n                                changeUsername\n                            \n                            \n                                    Async\n                                deleteUsr\n                            \n                            \n                                    Async\n                                getAreas\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOauthToUsr\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOauthToUsr(usr: UserAuth, body: OauthCreationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addOAuth')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                OauthCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUsername(usr: UserAuth, body: Username)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('username')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                Username\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUsr\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUsr(usr: UserAuth, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAreas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAreas(usr: UserAuth, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('areas')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(usr: UserAuth, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards, Res, BadRequestException, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { User } from './user.decorator';\nimport { OauthCreationDto, Username } from './user.dto';\nimport { UserService } from './user.service';\nimport { UserAreas } from './user.areas';\n\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly usersService: UserService,\n        private readonly userAreas: UserAreas\n    ) { }\n\n    @Post('addOAuth')\n    @UseGuards(AuthGuard('jwt'))\n    async addOauthToUsr(@User() usr: UserAuth, @Body() body: OauthCreationDto) {\n        return this.usersService.addOauthToUsr(usr, body)\n    }\n\n    @Post('username')\n    @UseGuards(AuthGuard('jwt'))\n    async changeUsername(@User() usr: UserAuth, @Body() body: Username) {\n        return this.usersService.changeUsername(usr.userId, body.username)\n    }\n\n    @Get('profile')\n    @UseGuards(AuthGuard('jwt'))\n    async getUserProfile(@User() usr: UserAuth, @Res() res) {\n        const user = await this.usersService.getUserFromId(usr.userId)\n        res.status(200).json(user)\n    }\n\n    @Get('areas')\n    @UseGuards(AuthGuard('jwt'))\n    async getAreas(@User() usr: UserAuth, @Res() res) {\n        const areas = await this.userAreas.getAreas(usr.userId)\n        res.status(200).json(areas)\n    }\n\n    @Delete('')\n    @UseGuards(AuthGuard('jwt'))\n    async deleteUsr(@User() usr: UserAuth, @Res() res) {\n        const status = await this.usersService.deleteUser(usr.userId)\n        res.status(200).json(status)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreationDto.html":{"url":"classes/UserCreationDto.html","title":"class - UserCreationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class UserCreationDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    image: string\n}\n\nexport class UserDto {\n    @IsString()\n    id: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    username: string\n\n    @IsString()\n    created_at: string\n}\n\nexport class UserLoginDto {\n    @IsString()\n    email?: string\n\n    @IsString()\n    password: string\n}\n\nexport class OauthCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    refresh_token: string\n\n    @IsString()\n    duration: string\n\n    @IsString()\n    generated_at: string\n}\n\nexport class Username {\n    @IsString()\n    username: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class UserCreationDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    image: string\n}\n\nexport class UserDto {\n    @IsString()\n    id: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    username: string\n\n    @IsString()\n    created_at: string\n}\n\nexport class UserLoginDto {\n    @IsString()\n    email?: string\n\n    @IsString()\n    password: string\n}\n\nexport class OauthCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    refresh_token: string\n\n    @IsString()\n    duration: string\n\n    @IsString()\n    generated_at: string\n}\n\nexport class Username {\n    @IsString()\n    username: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class UserCreationDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    image: string\n}\n\nexport class UserDto {\n    @IsString()\n    id: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    username: string\n\n    @IsString()\n    created_at: string\n}\n\nexport class UserLoginDto {\n    @IsString()\n    email?: string\n\n    @IsString()\n    password: string\n}\n\nexport class OauthCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    refresh_token: string\n\n    @IsString()\n    duration: string\n\n    @IsString()\n    generated_at: string\n}\n\nexport class Username {\n    @IsString()\n    username: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserAreas \n\nUserAreas \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserAreas  -->\n\nUserModule->UserAreas \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nActionsService\n\nActionsService\n\nUserModule -->\n\nActionsService->UserModule\n\n\n\n\n\nAreasService\n\nAreasService\n\nUserModule -->\n\nAreasService->UserModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nUserModule -->\n\nOauthService->UserModule\n\n\n\n\n\nUserAreas\n\nUserAreas\n\nUserModule -->\n\nUserAreas->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActionsService\n                        \n                        \n                            AreasService\n                        \n                        \n                            OauthService\n                        \n                        \n                            UserAreas\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserAreas\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserAreas } from './user.areas';\nimport { UserController } from './user.controller';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport { AreasService } from 'src/areas/areas.service';\nimport { ActionsService } from 'src/actions/actions.service';\nimport { OauthService } from 'src/oauth/oauth.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [UserService, UserAreas, AreasService, ActionsService, OauthService],\n  exports: [UserService, UserAreas],\n  controllers: [UserController]\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOauthToUsr\n                            \n                            \n                                    Async\n                                changeUsername\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserFromId\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: DatabasePool, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    DatabasePool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOauthToUsr\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOauthToUsr(usr: UserAuth, body: OauthCreationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                OauthCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUsername(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(usr: UserLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromId(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(usr: UserCreationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usr\n                                    \n                                                UserCreationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, UnauthorizedException, HttpException, HttpStatus, HttpServer } from '@nestjs/common';\nimport { InjectPool } from 'nestjs-slonik';\nimport { OauthCreationDto, UserCreationDto, UserDto, UserLoginDto } from './user.dto';\nimport { DatabasePool, sql } from 'slonik'\nimport * as bcrypt from 'bcrypt';\nimport { UserAuth } from 'src/auth/auth.controller';\nimport { qFirstFieldsFromWhere, qDeleteFieldsFromWhere } from 'src/queries/queries';\nimport { HttpModule, HttpService } from '@nestjs/axios';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectPool()\n        private readonly pool: DatabasePool,\n        private readonly httpService: HttpService\n    ) { }\n\n    async registerUser(usr: UserCreationDto) {\n        if (!usr.email || !usr.username || !usr.password)\n            throw new BadRequestException('One or more of the required fields are missing')\n        let res = await this.pool.query(sql`SELECT *\n                FROM usr\n                WHERE email = ${usr.email}`)\n        if (res.rows.length != 0) {\n            throw new BadRequestException(\"Email already in use\")\n        }\n        await this.pool.query(sql`INSERT INTO usr\n        (username, password, email, image)\n        values (${usr.username}, ${bcrypt.hashSync(usr.password, 10)}, ${usr.email}, ${usr.image})`)\n        let ret = await this.pool.query(sql`SELECT *\n                FROM usr\n                WHERE email = ${usr.email}`)\n        return ret.rows[0]\n    }\n\n    async getUser(usr: UserLoginDto) {\n        if (!usr.email)\n            throw new BadRequestException(\"Fields are missing\")\n        let res = await this.pool.query(sql`SELECT * FROM usr WHERE email =  ${usr.email}`)\n        if (!usr.password)\n            throw new BadRequestException(\"Fields are missing\")\n        if (res.rowCount != 1)\n            throw new BadRequestException(\"User not found\")\n        let match = bcrypt.compareSync(usr.password, res.rows[0].password); // true\n        if (match) {\n            return res.rows[0]\n        } else {\n            throw new UnauthorizedException(\"Password doesn't match\")\n        }\n    }\n\n    async getUserFromId(userId: string) {\n        let res: any;\n\n        res = await qFirstFieldsFromWhere({ pool: this.pool, selectFields: [\"*\"], from: \"usr\", where: \"id\", value: userId})\n        return res\n    }\n\n    async addOauthToUsr(usr: UserAuth, body: OauthCreationDto) {\n        try {\n            await this.pool.query(sql`INSERT INTO oauth (\n                token, refresh_token, duration, generated_at, usr_id\n                ) values (${body.token}, ${body.refresh_token}, ${body.duration}, ${body.generated_at}, ${usr.userId})`)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async changeUsername(userId: string, username: string) {\n        await this.pool.query(\n            sql`UPDATE usr\n            SET username = ${username}\n            WHERE id = ${userId}`)\n        try {\n            const res = await this.httpService.post('http://pantharea.fun:8080/webhooks/Area', {action_type: \"Username change\", userId: userId}).toPromise()\n        } catch (err) {\n            console.log(err)\n        }\n        return \"Username well changed !\"\n    }\n\n    async deleteUser(userId: string) {\n        try {\n            await qDeleteFieldsFromWhere({ pool: this.pool, from: \"oauth\", where: \"usr_id\", value: userId})\n        } catch {}\n        try {\n            await qDeleteFieldsFromWhere({ pool: this.pool, from: \"area\", where: \"usr_id\", value: userId})\n        } catch {}\n        await qDeleteFieldsFromWhere({ pool: this.pool, from: \"usr\", where: \"id\", value: userId})\n        return \"User deleted\"\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Username.html":{"url":"classes/Username.html","title":"class - Username","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Username\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.dto.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\"\n\nexport class UserCreationDto {\n    @IsString()\n    username: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    image: string\n}\n\nexport class UserDto {\n    @IsString()\n    id: string\n\n    @IsString()\n    email: string\n\n    @IsString()\n    password: string\n\n    @IsString()\n    username: string\n\n    @IsString()\n    created_at: string\n}\n\nexport class UserLoginDto {\n    @IsString()\n    email?: string\n\n    @IsString()\n    password: string\n}\n\nexport class OauthCreationDto {\n    @IsString()\n    token: string\n\n    @IsString()\n    refresh_token: string\n\n    @IsString()\n    duration: string\n\n    @IsString()\n    generated_at: string\n}\n\nexport class Username {\n    @IsString()\n    username: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WebhooksController.html":{"url":"controllers/WebhooksController.html","title":"controller - WebhooksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WebhooksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/webhooks/webhooks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                webhooks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actionArea\n                            \n                            \n                                    Async\n                                actionGithub\n                            \n                            \n                                    Async\n                                actionGitlab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        actionArea\n                        \n                    \n                \n            \n            \n                \n                    \n                    actionArea(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Area')\n                \n            \n\n            \n                \n                    Defined in src/webhooks/webhooks.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        actionGithub\n                        \n                    \n                \n            \n            \n                \n                    \n                    actionGithub(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Github')\n                \n            \n\n            \n                \n                    Defined in src/webhooks/webhooks.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        actionGitlab\n                        \n                    \n                \n            \n            \n                \n                    \n                    actionGitlab(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Gitlab')\n                \n            \n\n            \n                \n                    Defined in src/webhooks/webhooks.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req } from '@nestjs/common';\nimport { AreasService } from 'src/areas/areas.service';\nimport { WebhooksService } from './webhooks.service';\n\n@Controller('webhooks')\nexport class WebhooksController {\n\n    constructor(\n        private readonly webhooksServices: WebhooksService,\n        private readonly areasServices: AreasService\n    ) { }\n\n    @Post('Github')\n    async actionGithub(@Req() req, @Body() body) {\n        let params = JSON.stringify({url:body.repository.html_url,secret:req.headers[\"x-hub-signature\"]})\n        this.areasServices.callReaction(params)\n    }\n\n    @Post('Gitlab')\n    async actionGitlab(@Body() body) {\n        const params = JSON.stringify({\n            project_id: body.project_id,\n        })\n        this.areasServices.callReaction(params)\n    }\n\n    @Post('Area')\n    async actionArea(@Body() body) {\n        var params\n        console.log(\"HELLO\")\n        if (body.action_type === \"Area deleted\") {\n            console.log(\"received\")\n            params = JSON.stringify({action_type: body.action_type, user_id: body.userId, id: body.id})\n        }\n        else {\n            params = JSON.stringify({action_type: body.action_type, user_id: body.userId})\n        }\n        console.log(params)\n        this.areasServices.callReaction(params)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebhooksModule.html":{"url":"modules/WebhooksModule.html","title":"module - WebhooksModule","body":"\n                   \n\n\n\n\n    Modules\n    WebhooksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WebhooksModule\n\n\n\ncluster_WebhooksModule_providers\n\n\n\n\nActionsService\n\nActionsService\n\n\n\nWebhooksModule\n\nWebhooksModule\n\nWebhooksModule -->\n\nActionsService->WebhooksModule\n\n\n\n\n\nAreasService\n\nAreasService\n\nWebhooksModule -->\n\nAreasService->WebhooksModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nWebhooksModule -->\n\nOauthService->WebhooksModule\n\n\n\n\n\nWebhooksService\n\nWebhooksService\n\nWebhooksModule -->\n\nWebhooksService->WebhooksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/webhooks/webhooks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActionsService\n                        \n                        \n                            AreasService\n                        \n                        \n                            OauthService\n                        \n                        \n                            WebhooksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WebhooksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { ActionsService } from 'src/actions/actions.service';\nimport { AreasModule } from 'src/areas/areas.module';\nimport { AreasService } from 'src/areas/areas.service';\nimport { OauthService } from 'src/oauth/oauth.service';\nimport { WebhooksController } from './webhooks.controller';\nimport { WebhooksService } from './webhooks.service';\n\n@Module({\n  imports: [HttpModule],\n  controllers: [WebhooksController],\n  providers: [WebhooksService, AreasService, ActionsService, OauthService]\n})\nexport class WebhooksModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhooksService.html":{"url":"injectables/WebhooksService.html","title":"injectable - WebhooksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhooksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/webhooks/webhooks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getActions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(actionService: ActionsService)\n                    \n                \n                        \n                            \n                                Defined in src/webhooks/webhooks.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        actionService\n                                                  \n                                                        \n                                                                        ActionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/30 * * * * *')\n                \n            \n\n            \n                \n                    Defined in src/webhooks/webhooks.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { ActionsService } from 'src/actions/actions.service';\n\n@Injectable()\nexport class WebhooksService {\n    constructor(\n        private readonly actionService: ActionsService\n    ) {}\n\n    @Cron('*/30 * * * * *')\n    async getActions() {\n        console.log('hello')\n        this.actionService.updateWeather()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/about/about.controller.ts\n            \n            controller\n            AboutController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/about/about.service.ts\n            \n            injectable\n            AboutService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/actions/actions.controller.ts\n            \n            controller\n            ActionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/actions/actions.dto.ts\n            \n            class\n            HookCreationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/actions/actions.service.ts\n            \n            injectable\n            ActionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/areas/areas.controller.ts\n            \n            controller\n            AreasController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/areas/areas.dto.ts\n            \n            class\n            AreaCreationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/areas/areas.dto.ts\n            \n            class\n            AreaId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/areas/areas.dto.ts\n            \n            class\n            DicoDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/areas/areas.service.ts\n            \n            injectable\n            AreasService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            UserAuth\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.strategy.ts\n            \n            injectable\n            AuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            class\n            EnvironmentVariables\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            function\n            validateEnvironmentVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/oauth/oauth.dto.ts\n            \n            class\n            OauthDictionnaryDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/oauth/oauth.dto.ts\n            \n            class\n            TokenCreationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/queries/queries.ts\n            \n            function\n            checkIsThereResult\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/queries/queries.ts\n            \n            function\n            qAllFieldsFromWhere\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/queries/queries.ts\n            \n            function\n            qDeleteFieldsFromWhere\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/queries/queries.ts\n            \n            function\n            qFirstFieldsFromWhere\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reactions/reactions.controller.ts\n            \n            controller\n            ReactionsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reactions/reactions.controller.ts\n            \n            variable\n            twilio\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reactions/reactions.controller.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reactions/reactions.dto.ts\n            \n            class\n            DiscordMsgReactionDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/reactions/reactions.dto.ts\n            \n            class\n            MailReactionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reactions/reactions.dto.ts\n            \n            class\n            SmsReactionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/reactions/reactions.service.ts\n            \n            injectable\n            ReactionsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/services.controller.ts\n            \n            controller\n            ServicesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/services.service.ts\n            \n            injectable\n            ServicesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.areas.ts\n            \n            injectable\n            UserAreas\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.decorator.ts\n            \n            function\n            getUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            OauthCreationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserCreationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            Username\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/webhooks/webhooks.controller.ts\n            \n            controller\n            WebhooksController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/webhooks/webhooks.dto.ts\n            \n            class\n            GithubDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/webhooks/webhooks.dto.ts\n            \n            class\n            Repository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/webhooks/webhooks.service.ts\n            \n            injectable\n            WebhooksService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^0.0.5\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.1.6\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.1.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @types/cookie-parser : ^1.4.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            db-migrate : ^0.11.13\n        \n            db-migrate-pg : ^1.2.2\n        \n            discord-webhook-node : ^1.1.8\n        \n            jwt-decode : ^3.1.2\n        \n            nestjs-slonik : ^1.0.2\n        \n            node-mailjet : ^3.3.7\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.0.0\n        \n            slonik : ^27.1.0\n        \n            slonik-interceptor-field-name-transformation : ^1.6.4\n        \n            smee-client : ^1.2.2\n        \n            twilio : ^3.75.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AorREA   (src/.../queries.ts)\n                        \n                        \n                            BackendEnvironment   (src/.../config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/queries/queries.ts\n    \n        \n            \n                \n                    \n                        \n                        AorREA\n                    \n                \n                        \n                            \n                                 Action\n                            \n                        \n                        \n                            \n                                 Reaction\n                            \n                        \n            \n        \n\n    src/config.ts\n    \n        \n            \n                \n                    \n                        \n                        BackendEnvironment\n                    \n                \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            checkIsThereResult   (src/.../queries.ts)\n                        \n                        \n                            getUser   (src/.../user.decorator.ts)\n                        \n                        \n                            qAllFieldsFromWhere   (src/.../queries.ts)\n                        \n                        \n                            qDeleteFieldsFromWhere   (src/.../queries.ts)\n                        \n                        \n                            qFirstFieldsFromWhere   (src/.../queries.ts)\n                        \n                        \n                            validateEnvironmentVariables   (src/.../config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/queries/queries.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkIsThereResult\n                        \n                    \n                \n            \n            \n                \ncheckIsThereResult(res: any, error: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qAllFieldsFromWhere\n                        \n                    \n                \n            \n            \n                \nqAllFieldsFromWhere(props: SelectFieldsFromWhere)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n                                    \n                                                SelectFieldsFromWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qDeleteFieldsFromWhere\n                        \n                    \n                \n            \n            \n                \nqDeleteFieldsFromWhere(props: DefaultFieldsFromWhere)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n                                    \n                                                DefaultFieldsFromWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qFirstFieldsFromWhere\n                        \n                    \n                \n            \n            \n                \nqFirstFieldsFromWhere(props: SelectFieldsFromWhere)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n                                    \n                                                SelectFieldsFromWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/user/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(cookie)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cookie\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEnvironmentVariables\n                        \n                    \n                \n            \n            \n                \nvalidateEnvironmentVariables(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AboutModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ActionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AreasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebhooksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AboutModule\n\n\n\ncluster_AboutModule_providers\n\n\n\ncluster_ActionsModule\n\n\n\ncluster_ActionsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AreasModule\n\n\n\ncluster_AreasModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ReactionsModule\n\n\n\ncluster_ReactionsModule_providers\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_WebhooksModule\n\n\n\ncluster_WebhooksModule_providers\n\n\n\n\nAboutService\n\nAboutService\n\n\n\nAboutModule\n\nAboutModule\n\nAboutModule -->\n\nAboutService->AboutModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutModule->AppModule\n\n\n\n\n\nActionsService\n\nActionsService\n\n\n\nActionsModule\n\nActionsModule\n\nActionsModule -->\n\nActionsService->ActionsModule\n\n\n\n\n\nAreasModule\n\nAreasModule\n\nAreasModule -->\n\nActionsService->AreasModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nActionsService->UserModule\n\n\n\n\n\nWebhooksModule\n\nWebhooksModule\n\nWebhooksModule -->\n\nActionsService->WebhooksModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nActionsModule -->\n\nOauthService->ActionsModule\n\n\n\nAreasModule -->\n\nOauthService->AreasModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\nUserModule -->\n\nOauthService->UserModule\n\n\n\nWebhooksModule -->\n\nOauthService->WebhooksModule\n\n\n\nAppModule -->\n\nActionsModule->AppModule\n\n\n\nAppModule -->\n\nAreasModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nReactionsModule\n\nReactionsModule\n\nAppModule -->\n\nReactionsModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nServicesService \n\nServicesService \n\nServicesService  -->\n\nServicesModule->ServicesService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserAreas \n\nUserAreas \n\nUserAreas  -->\n\nUserModule->UserAreas \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAppModule -->\n\nWebhooksModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nServicesService\n\nServicesService\n\nServicesModule -->\n\nServicesService->ServicesModule\n\n\n\nAppModule -->\n\nServicesService->AppModule\n\n\n\n\n\nAreasService\n\nAreasService\n\nAreasModule -->\n\nAreasService->AreasModule\n\n\n\nUserModule -->\n\nAreasService->UserModule\n\n\n\nWebhooksModule -->\n\nAreasService->WebhooksModule\n\n\n\n\n\nUserAreas\n\nUserAreas\n\nAreasModule -->\n\nUserAreas->AreasModule\n\n\n\nUserModule -->\n\nUserAreas->UserModule\n\n\n\n\n\nAuthStrategy\n\nAuthStrategy\n\nAuthModule -->\n\nAuthStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nReactionsModule -->\n\nUserService->ReactionsModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nWebhooksService\n\nWebhooksService\n\nWebhooksModule -->\n\nWebhooksService->WebhooksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DefaultFieldsFromWhere   (src/.../queries.ts)\n                        \n                        \n                            SelectFieldsFromWhere   (src/.../queries.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/queries/queries.ts\n    \n    \n        \n            \n                \n                    \n                    DefaultFieldsFromWhere\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectFieldsFromWhere\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            twilio   (src/.../reactions.controller.ts)\n                        \n                        \n                               (src/.../reactions.controller.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/reactions/reactions.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        twilio\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('twilio')(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('discord-webhook-node')\n                    \n                \n\n\n        \n    \n\n    src/user/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(async (data: any, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return getUser(request.cookies)\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
