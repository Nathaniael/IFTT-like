"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFieldNameTransformationInterceptor = void 0;
const camelcase_1 = __importDefault(require("camelcase"));
const underscoreFieldRegex = /^[a-z0-9_]+$/u;
const underscoreFieldTest = (field) => {
    return underscoreFieldRegex.test(field.name);
};
const createFieldNameTransformationInterceptor = (configuration) => {
    var _a;
    if (configuration.format !== 'CAMEL_CASE') {
        throw new Error('Unsupported format.');
    }
    const fieldTest = (_a = configuration.test) !== null && _a !== void 0 ? _a : underscoreFieldTest;
    return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        transformRow: (context, query, row, fields) => {
            if (!context.sandbox.formattedFields) {
                context.sandbox.formattedFields = [];
                for (const field of fields) {
                    context.sandbox.formattedFields.push({
                        formatted: fieldTest(field) ? (0, camelcase_1.default)(field.name) : field.name,
                        original: field.name,
                    });
                }
            }
            const { formattedFields } = context.sandbox;
            const transformedRow = {};
            for (const field of formattedFields) {
                if (typeof field.formatted !== 'string') {
                    throw new TypeError('Unexpected field name type.');
                }
                transformedRow[field.formatted] = row[field.original];
            }
            return transformedRow;
        },
    };
};
exports.createFieldNameTransformationInterceptor = createFieldNameTransformationInterceptor;
